/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/grid/grids.css
          postfix: 
   spritesEnabled: true */

/**
 @component grids
 @brief a system for layout and arrangement
 @cssObject zen-grids
 @javaElement common.html.zen.GridLine
 
 @description
 A Grid component is a layout mechanism for ensuring equal horizontal distribution of its children.
 Grid components can also be nested inside one another, so that additional ratios can be attained.
 
 @instructions
 Grids are used for structural layout only (i.e., they are not “skinned”).
 Grid components can currently handle anywhere from one to five child elements,
 ensuring equal distribution of children by applying 100%, 50%, 33.33%, 25%, or 20% widths
 (or any multiple of such, up to 100%), depending on the number of child elements present.
 Grid components can also be nested inside one another, so that additional ratios can be attained.
 
 The following classes are needed to build a grid:
 
 - `zen-line`     Parent div that groups units on one horizontal line.
 
 - `zen-unit`     Base class which divides a line into sections (columns).
 
 - `zen-sizeXofY` Extends `zen-unit`. Indicates the fractional width of the unit, for example size3of4 would take up three quarters, or 75%, of
              the horizontal space. The following fractions are supported: size1of1, size1of2, size1of3, size2of3, size1of4,
              size3of4, size1of5, size2of5, size3of5, size4of5
              
 - `zen-lastUnit` Extends `zen-unit`. This should *always* be applied to the last unit in a line.
 
 For more information, see the [illustration of different grid size combinations](/projRes/zen/uiguide/img/grids.jpg).
 
 
 
 @example
 <div class="zen-line">
    <div class="zen-unit zen-size1of3">
        <h1>33% width</h1>
        <p>
            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
            Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
            Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
            Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
        </p>
    </div>
    <div class="zen-unit zen-size2of3 zen-lastUnit">
        <h1>66% width</h1>
        <p>
            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
            Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
            Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
            Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
        </p>        
    </div>
 </div> 
 
 
 
 @example
 <div class="zen-line">
    <div class="zen-unit zen-size1of3">
        <h3>1of3</h3>
        <p>
            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et
            dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex
            ea commodo consequat.
        </p>
    </div>
    <div class="zen-unit zen-size2of3 zen-lastUnit">
        <div class="zen-line">
            <div class="zen-unit zen-size1of4">
                <h3>1of4</h3>
                <p>
                    Lorem ipsum dolor sit amet, consectetur adipisicing elit.
                </p>                    
            </div>
            <div class="zen-unit zen-size1of2">
                <h3>1of2</h3>
                <p>
                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et
                    dolore magna aliqua.
                </p>                  
            </div>
            <div class="zen-unit zen-size1of4 zen-lastUnit">
                <h3>1of4</h3>
                <p>
                    Lorem ipsum dolor sit amet, consectetur adipisicing elit.
                </p>                  
            </div>
        </div>
    </div>
 </div>
 
 
 
 @example
 <div class="zen-line" style="background-color:#f2f2f2">
    <div class="zen-unit zen-size1of5" style="background-color:#cfe2f3">
        <h3>1/5</h3>
        <p>
            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et
            dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex
            ea commodo consequat.
        </p>
    </div>
    <div class="zen-unit zen-size3of5">
        <div class="zen-line">
            <div class="zen-unit zen-size1of2" style="background-color:#fff2cc">
                <h3>1/2</h3>
                <p>
                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et
                    dolore magna aliqua.
                </p>
            </div>
            <div class="zen-unit zen-size1of2 zen-lastUnit" style="background-color:#ffe599">
                <h3>1/2</h3>
                <p>
                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et
                    dolore magna aliqua.
                </p>                
            </div>
        </div>
        <div class="zen-line">
            <div class="zen-unit zen-size1of3" style="background-color:#d9d2e9">
                <h3>1/3</h3>
                <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt.</p>
            </div>
            <div class="zen-unit zen-size2of3 zen-lastUnit">
                <div class="zen-line">
                    <div class="zen-unit zen-size1of2" style="background-color:#b4a7d6">
                        <h3>1/2</h3>
                        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
                    </div>
                    <div class="zen-unit zen-size1of2 zen-lastUnit" style="background-color:#8e7cc3">
                        <h3>1/2</h3>
                        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
                    </div>
                </div>
                <div class="zen-line">
                    <div class="zen-unit zen-lastUnit zen-size1of1" style="background-color:#d9ead3">
                        <h3>1</h3>
                        <p>Lorem ipsum dolor sit amet, consectetur.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="zen-unit zen-size1of5 zen-lastUnit" style="background-color:#cfe2f3">
        <h3>1/5</h3>
        <p>
            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et
            dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex
            ea commodo consequat.
        </p>
    </div>
</div>
*/
.zen .zen-line:after {
	clear: both;
	display: block;
	visibility: hidden;
	overflow: hidden;
	height: 0 !important;
	line-height: 0;
	content: ".";
}

.zen .zen-unit,
.zen .zen-start {
	float: left;
}

.zen .zen-unitExt,
.zen .zen-end {
	float: right;
}

.zen .zen-size1of1 {
	float: none;
}

.zen .zen-size1of2 {
	width: 50%;
}

.zen .zen-size1of3 {
	width: 33.33333%;
}

.zen .zen-size2of3 {
	width: 66.66666%;
}

.zen .zen-size1of4 {
	width: 25%;
}

.zen .zen-size3of4 {
	width: 75%;
}

.zen .zen-size1of5 {
	width: 20%;
}

.zen .zen-size2of5 {
	width: 40%;
}

.zen .zen-size3of5 {
	width: 60%;
}

.zen .zen-size4of5 {
	width: 80%;
}

.zen .zen-lastUnit {
	float: none;
	display: table-cell;
	width: 9999em;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/box/box.css
          postfix: 
   spritesEnabled: true */

/**
 @component box
 @brief A generic container with many styling options
 @cssObject zen-box
 @javaElement common.html.zen.Box
 @lumen zencore:box
 
 @description
 Box components are styled containers that hold other things.
 
 Boxes are used for messaging (errors, warnings, etc.), page blocks on detail/edit pages, wizard steps,
 instructional text, FAQs, and many more.
  
 @instructions
 Boxes should have from one to three sections in them:
 
 - An optional header
 - A mandatory body section
 - An optional footer
  
 Through the use of extensions, you can combine different types of headers, backgrounds, contours, footers, and more to
 get the specific look that you want.
 
 @extensibleOnlyExample
 <div class="zen-box">
     <div class="zen-inner">
        <div class="zen-header">
            <h4>Box Header</h4>
        </div>
        <div class="zen-body">
            <p>Body content</p>
        </div>
    </div>
 </div>
 
 @example
 <div class="zen-box zen-standardBackground zen-simple">
    <div class="zen-inner">
        <div class="zen-header">
            <h4>Box Header</h4>
        </div>
        <div class="zen-body">
            <p>
                The box is a generic container with a myriad of options for backgrounds, header styles,
                footer styles, and much more.
            </p>
        </div>
        <div class="zen-footer zen-pageBoxFooter">
            <p>Box Footer</p>
        </div>
    </div>
 </div>
 
 @example
 <div class="zen-box zen-standardBackground">
    <div class="zen-inner">
        <div class="zen-header"><h4>Complex Box</h4></div>

        <div class="zen-body zen-pan">        
            <div class="zen-box zen-instructions zen-innerBackground zen-mam">
                <div class="zen-inner">
                    <div class="zen-body">
                        <p>
                            Boxes can be nested inside of each other as many times as you like.
                            You can use this to your advantage to achieve common SFDC UI patterns.
                            Be careful, however, that you aren't using a box when you don't truly need one.
                            Sometimes regular headings, divs, and other block level elements
                            are all that you need.                            
                        </p>                        
                    </div>
                </div>
            </div>
                   
            <div class="zen-box zen-instructions zen-innerBackground zen-mam">
                <div class="zen-inner">
                    <div class="zen-body">
	                    <ul class="zen-basicList">
	                       <li>item one</li>
	                       <li>item two</li>
	                       <li>item three</li>
	                    </ul>
                    </div>
                </div>
            </div>                       
        </div>
    </div>
 </div>
*/

/**
 @componentSection header
 @description The header container of the box
 
 @componentSection body
 @description The main content container for the box
 
 @componentSection footer
 @description The footer container of the box
*/
.zen .zen-body {
	display:table;
	vertical-align:top;
}

.zen .zen-body,
.zen .zen-footer,
.zen .zen-header {
	display:table; /* new block formatting context */
	width:100%;  
	-moz-box-sizing: border-box;
	-webkit-box-sizing: border-box;
	box-sizing: border-box;
}

.zen .zen-body.zen-cropH,
.zen .zen-body.zen-cropMe {
	/*
        the display:table prevents the overflow property from working.
        display:table is used to get a new block formatting context,
        and since the crop classes use overflow:hidden, they will get a new
        block formatting context that way instead.
    */ 
	display: block; 
}

.zen .zen-footer {
	text-align:center;
}

.zen .zen-inner:after,
.zen .zen-header:after,
.zen .zen-body:after,
.zen .zen-footer:after {
	clear:both;
	display:block;
	visibility:hidden;
	overflow:hidden;
	height:0 !important;
	line-height:0;
	content:".";
}

.zen .zen-inner {
	position:relative;
}
 
.zen .zen-arrow {
	display:block;
	background-repeat:no-repeat;
	font-size:.01em;
	position:relative;
	z-index:10;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/box/themes/aloha/box.css
          postfix: 
   spritesEnabled: true */

/* ====== contours ====== */

/**
 @extension basic
 @extends box
 
 A box without a border, however it adds the site's default border-radius to any background.
 
 @extensibleExample
 <div class="zen-box zen-basic zen-chattyBackground">
     <b class="zen-top"><b class="zen-topRight"></b></b>
     <div class="zen-inner">
         <div class="zen-header">
             <h4>Box Header</h4>
         </div>
         <div class="zen-body">
             <p>Here we applied the chattyBackground, but you can apply any background extension that you like.</p>
         </div>
     </div>
 </div> 
*/
.zen .zen-basic {
	-moz-border-radius: 7px;
	border-radius: 7px;
	background-color: #fff;
}

.zen .zen-basic .zen-header {
	-moz-border-radius-topleft: 7px;	/* FF 3.6 */
	-moz-border-radius-topright: 7px;
	border-top-left-radius: 7px;
	border-top-right-radius: 7px;
}

/**
 @extension simple
 @extends box
 A box with the default border and contour.
*/
.zen .zen-simple {
	border: 1px solid #eaeaea;
	-moz-border-radius: 4px;
	border-radius: 4px;
}

/**
 @extension faq
 @extends box.simple
 
 An FAQ Box component is used to hold a collection of FAQs related to the currently displayed content on a page.
 For example, the Import Wizard landing page contains an FAQ Box component that answers some commonly asked
 questions about the import process.

 Note that it contains a few extra elements outside of the `zen-inner` div.
 
 @extensibleExample
 <div class="zen-box zen-simple zen-faq">
     <b class="zen-top"><b class="zen-topRight"></b></b>
     <div class="zen-inner">
         <div class="zen-header">
             <h4>Box Header</h4>
         </div>
         <div class="zen-body">
             <p>Body content</p>
         </div>
     </div>
 </div> 
 
 @example
 <div class="zen-box zen-simple zen-faq zen-faqBackground">
     <b class="zen-top"><b class="zen-topRight"></b></b>
     <div class="zen-inner">
         <div class="zen-header">
             <h4>Faq With Background</h4>
         </div>
         <div class="zen-body">
             <p>This is how the box looks with faqBackground</p>
         </div>
     </div>
 </div>  
*/ 
.zen .zen-faq .zen-topRight {
	background-image: url(/img/oocss/box_faq_folded_corner.png);
	background-color: #fff;
	width: 18px;
	height: 18px;
}

/**
 @extension themed
 @extends box
 
 A Themed Box component is used when the top border of the box should be correlated to the motif colour (@see Motif.java) of the active object type.
 For example, a Themed Box is used for the detail area of an Account record detail page, with a thick blue top border to indicate the information
 inside the box relates to the Account object.
*/
.zen .zen-themed {
	border:1px solid #eaeaea; /* TODO NM: this isn't finished */
	-moz-border-radius: 4px;
	border-radius: 4px;
	border-top-width: 3px;
}

/**
 @extension chart
 @extends box
 A Chart Box component is used for boxes containing the charts or graphs generated by either a report or a dashboard.
 */
.zen .zen-chart {
	border: 2px solid #dcdcdc;
	-moz-border-radius: 0;
	border-radius: 0;
}

/**
 @extension stats
 @extends box
*/
.zen .zen-stats {
	-moz-border-radius: 8px;
	border-radius: 8px;
	border: 1px solid #eaeaea;
}

/**
 @extension instructions
 @extends box
 
 An Instructions Box component is used to display a step-by-step list of instructions a 
 user should follow to complete a specific task. For example, an Instruction Box is used ???
*/
.zen .zen-instructions {
	border: 1px solid #eaeaea;
	-moz-border-radius: 0;
	border-radius: 0;
}

/* ====== backgrounds ====== */

/**
 @extension chattyBackground
 @extends box
*/
.zen .zen-chattyBackground {
	background: #fff5db;
	background: -moz-linear-gradient(top,#fff5db 0%,#ffe5a9 100%);
	background: -webkit-linear-gradient(top,#fff5db 0%,#ffe5a9 100%);	
	background: -ms-linear-gradient(top,#fff5db 0%,#ffe5a9 100%);
}

/**
 @extension standardBackground
 @extends box
*/
.zen .zen-standardBackground {
	background-color: #f8f8f8;
}

/**
 @extension wizardBackground
 @extends box
*/
.zen .zen-wizardBackground {
	color: #fff;
	background-color: #1797c0; /* TODO: needs to go in custom_template.css */
}

/**
 @extension instructionsBackground
 @extends box
*/
.zen .zen-instructionsBackground {
	background-color: #ffc;
}

/**
 @extension chartBackground
 @extends box
*/
.zen .zen-chartBackground {
	background-color: #dcdcdc; /* do we need another shade of gray ? */
}

/**
 @extension recycleBackground
 @extends box
*/
.zen .zen-recycleBackground {
	background-color: #dcfbdc;
}

/**
 @extension alertBackground
 @extends box
*/
.zen .zen-alertBackground {
	background-color: #fdedea;
}

/**
 @extension warnBackground
 @extends box
*/
.zen .zen-warnBackground {
	background-color: #ffffdc;
}

/**
 @extension confirmBackground
 @extends box
*/
.zen .zen-confirmBackground {
	background-color: #edfff1;
}

/**
 @extension infoBackground
 @extends box
*/
.zen .zen-infoBackground {
	background-color: #f5fcff;
}

/**
 @extension faqBackground
 @extends box
*/
.zen .zen-faqBackground {
    background: -moz-linear-gradient(top,#fff7c1,#fff 60px);
	background: -webkit-linear-gradient(top,#fff7c1,#fff 60px);
	background: -ms-linear-gradient(top,#fff7c1,#fff 60px);
}

/* innerBackground needs to be last */
.zen .zen-innerBackground {
	background-color: #fff;
}

/* ====== headers ====== */

/* default */
.zen .zen-header h1,
.zen .zen-header h2,
.zen .zen-header h3,
.zen .zen-header h4,
.zen .zen-header h5,
.zen .zen-header h6 {
	font-size: 1.167em;
}

/**
 @extension pageBoxHeader
 @extends box.header 
*/
.zen .zen-pageBoxHeader {
	border-bottom: 1px solid #fff;
	-moz-box-shadow: inset 0 -1px 0 #dbdbdb;
	-webkit-box-shadow: inset 0 -1px 0 #dbdbdb;
	box-shadow: inset 0 -1px 0 #dbdbdb;
}

/**
 @extension stepsHeader
 @extends box.header 
*/
.zen .zen-stepsHeader {
	background-color: #fff9d6;
	border-bottom: 1px solid #dbdbdb;
}

.zen .zen-stepsHeader h1,
.zen .zen-stepsHeader h2,
.zen .zen-stepsHeader h3,
.zen .zen-stepsHeader h4,
.zen .zen-stepsHeader h5,
.zen .zen-stepsHeader h6 {
	font-size: 1.083em;
}

/**
 @extension importHeader
 @extends box.header 
*/
.zen .zen-importHeader {
	background-color: #7b80b9;
	border-bottom: 1px solid #767cB6;
}

.zen .zen-importHeader h1,
.zen .zen-importHeader h2,
.zen .zen-importHeader h3,
.zen .zen-importHeader h4,
.zen .zen-importHeader h5,
.zen .zen-importHeader h6 {
	color: #fff;
	font-size: 1.083em;
}

/**
 @extension chartHeader
 @extends box.header 
*/
.zen .zen-chartHeader {
	background-color: #dcdcdc;
}

.zen .zen-chartHeader h1,
.zen .zen-chartHeader h2,
.zen .zen-chartHeader h3,
.zen .zen-chartHeader h4,
.zen .zen-chartHeader h5,
.zen .zen-chartHeader h6 {
	color: #30519d;
	font-size: 1.083em;
}

/**
 @extension popHeader
 @extends box.header 
*/
.zen .zen-popHeader {
	background-color: #ebeeef;
	background: -moz-linear-gradient(top,#fdfdfd 0%,#ebeeef 100%);
	background: -webkit-linear-gradient(top,#fdfdfd 0%,#ebeeef 100%);
	background: -ms-linear-gradient(top,#fdfdfd 0%,#ebeeef 100%);
}

/**
 @extension simpleHeader
 @extends box.header 
*/
.zen .simpleHeader {
    color: #000;
    font-weight: bold;
    font-size: 1em;
}

.zen .zen-simpleHeader h1,
.zen .zen-simpleHeader h2,
.zen .zen-simpleHeader h3,
.zen .zen-simpleHeader h4,
.zen .zen-simpleHeader h5,
.zen .zen-simpleHeader h6 {
    font-size: 1em;
}

.zen .zen-themed h1,
.zen .zen-themed h2,
.zen .zen-themed h3,
.zen .zen-themed h4,
.zen .zen-themed h5,
.zen .zen-themed h6 {
	font-size: 1.167em;
}

/**
 @extension emphasisHeader
 @extends box.header
*/
.zen .zen-emphasisHeader h1,
.zen .zen-emphasisHeader h2,
.zen .zen-emphasisHeader h3,
.zen .zen-emphasisHeader h4,
.zen .zen-emphasisHeader h5,
.zen .zen-emphasisHeader h6 {
    font-size: 1.3em;
    color: 000;
    font-weight: bold;       
}

/* ====== footers ====== */

/**
 @extension pageBoxFooter
 @extends box.footer
 
 @example
 <div class="zen-box">
     <div class="zen-inner">
        <div class="zen-header">
            <h4>Box Header</h4>
        </div>
        <div class="zen-body">
            <p>Body content</p>
        </div>
        <div class="zen-footer zen-pageBoxFooter">
            <p>Footer content</p>
        </div>
    </div>
 </div>
*/
.zen .zen-pageBoxFooter {
	border-top: 1px solid #dbdbdb;
	-moz-box-shadow: inset 0 1px 0 #fff;
	-webkit-box-shadow: inset 0 1px 0 #fff;
	box-shadow: inset 0 1px 0 #fff;
}

/* ====== complex boxes (that combine styles for box, header, body, footer) ====== */

/**
 @extension quick
 @extends box
 
 You know you like it
 
 @extensibleExample
 <div class="zen-box zen-quick">
     <div class="zen-inner">
        <div class="zen-header zen-quickHeader">
            <h4>Box Header</h4>
        </div>
        <div class="zen-body">
            <p>Body content</p>
        </div>
    </div>
 </div> 
*/
.zen .zen-quickHeader h1,
.zen .zen-quickHeader h2,
.zen .zen-quickHeader h3,
.zen .zen-quickHeader h4,
.zen .zen-quickHeader h5,
.zen .zen-quickHeader h6 {
	color: #fff;
	font-size: 1em;
}

.zen .zen-quick .zen-header,
.zen .zen-quick .zen-body {
	padding: 0 9px;
	-moz-border-radius: 7px;
	border-radius: 7px;
	background-color: #1797c0;
}

.zen .zen-quick .zen-body {
	background-color: #cfeef8;
	margin-top: 3px;
}

/* temporary spacing overrides for overlay dialog boxes because they haven't been zenified
   TODO EW: remove these when overlays are fixed */
.overlayDialog h1,
.overlayDialog h2,
.overlayDialog h3,
.overlayDialog h4,
.overlayDialog h5,
.overlayDialog h6 {
	margin: 0;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/message/message.css
          postfix: 
   spritesEnabled: true */

/* TODO NM: doc this once icons are included in zencss */
.zen .zen-message {
	border:1px solid #000;
	background-color:#E2E2E2;
	-moz-border-radius:5px;
	-webkit-border-radius:5px;
	border-radius:5px;
	-moz-box-shadow:inset 0 3px 0 -2px #FFF;
	-webkit-box-shadow:inset 0 3px 0 -2px #FFF;
	box-shadow:inset 0 3px 0 -2px #FFF;
}

.zen .zen-alert {
	border-color:#F2A199;
	background-color:#FDEDEA;
}

.zen .zen-warn {
	border-color:#F8E38E;
	background-color:#FFFFDC;
}

.zen .zen-confirm {
	border-color:#9BEBB3;
	background-color:#EDFFF1;
}

.zen .zen-info {
	border-color:#BEE6FF;
	background-color:#F5FCFF;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/toggle/toggle.css
          postfix: 
   spritesEnabled: true */

/**
 @component toggle
 @brief A control to show and hide content
 @requires box
 @cssObject zen-toggle
 
 A Toggle component is a specialized type of Box component that has a UI control for expanding or collapsing its content.
 
 It is used typically in situations where its content is important, but perhaps not for all
 user types, and thus provides a way for users to hide information not relevant to their task.
 
 @instructions
 In addition to the normal box elements of header, body, and footer, a Toggle component can also have an optional `zen-toggleIntro` element,
 which is always displayed, regardless of toggle state.
 
 @example
 <div class="zen-box zen-toggle zen-toggleOpen">
  <div class="zen-inner">
    <div class="zen-header">
      <h3>
        <b class="zen-toggleArrow"></b>
        Q: What is a Toggle component?
      </h3>
    </div>
    <div class="zen-toggleIntro">
      A: A specialized box that can hide or show content visibility.
    </div>
    <div class="zen-body"></div>
    <div class="zen-footer"></div>
  </div>
</div>
*/
/* TODO NM: finish documentation for toggleShowAll, custom border color, etc.. */
.zen .zen-toggle .zen-body {
	display:none;
}

.zen .zen-toggleOpen .zen-body {
	display:block;
}

.zen .zen-toggleArrow {
	float:left;
	display:block;
	width:0;
	height:0;
	border-style:solid;
	margin-right:10px;
	margin-top:2px;
}

.zen .zen-toggleOpen .zen-toggleArrow {
	margin-top:4px;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/toggle/themes/aloha/toggle.css
          postfix: 
   spritesEnabled: true */

.zen .zen-toggleArrow {
	border-width: 5px;
	border-right-width: 0;
	border-color: transparent;
	border-left-color: #464646;
}

.zen .open .zen-toggleArrow {
	border-width: 5px 5px 0 5px;
	border-color: #464646 transparent transparent;
}

.zen .zen-toggle {
	border-top: 3px solid #1797c0; /* should this go here? */
}

/* toggle skin two */
.zen .zen-toggleShowAll {
	border-top: 0;
}

.zen .zen-toggleShowAll .zen-header {
	border-bottom: 1px solid gray;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/tabs/tabs.css
          postfix: 
   spritesEnabled: true */

/**
 @component tabs
 @brief for breaking content into multiple sections
 @cssObject zen-tabs
 @requires box
 
 Tabs are a subclass of the Box component.
 
 They allow users to switch between 2 or more viewable sets of content,
 and are often used to save space or logical group related content.
 
 @instructions
 The JavaScript should apply a class `zen-current` to the selected `zen-tabControl` and `zen-tabBody` items.
 
 @extensibleExample
 <div class="zen-box zen-tabs">
    <div class="zen-inner">
        <div class="zen-header">
            <ul class="zen-tabControl">
                <li><a href="javascript:void(0);">Tab 1</a></li>
                <li class="zen-current"><a href="javascript:void(0);">Tab 2</a></li>
                <li><a href="javascript:void(0);">Tab 3</a></li>
                <li><a href="javascript:void(0);">Tab 4</a></li>
            </ul>
        </div>
        <div class="zen-body">
            <ul class="zen-tabBody">
                <li><p>Content 1</p></li>
                <li class="zen-current"><p>Content 2</p></li>
                <li><p>Content 3</p></li>
                <li><p>Content 4</p></li>
                <li><p>Content 5</p></li>
             </ul>
        </div>
    </div>
 </div>
*/
.zen .zen-tabs .zen-header {
    z-index: 5;
    padding: 0;
    position: relative;
    overflow: visible;
}

.zen .zen-tabs .zen-header:after {
    content: "";
}

.zen .zen-tabs .zen-header ul {
    padding: 0 5px;
    margin: 0;
}

.zen .zen-tabs .zen-header li {
    float: left;
}

.zen .zen-tabs .zen-body {
	position: relative;
	z-index: 4;
	display: block;
}

.zen .zen-tabControl a {
	display: inline-block;
	padding: 7px 10px 3px 10px;
}

.zen .zen-tabControl .zen-current {
    z-index: 1;
    position: relative;
    top: 4px;
}

.zen .zen-tabControl .zen-current a {
    cursor: default;
}

.zen .zen-tabs .zen-tabBody li {
	display: none;
}

.zen .zen-tabs .zen-tabBody li li {
	display: block;
}

.zen .zen-tabs .zen-tabBody .zen-current {
	display: block;
}

/**
 @extension simpleTabs
 @extends tabs
 @description This changes the style of the tabs to have a simple gray border at the top.
*/
.zen .zen-simpleTabs .zen-tabControl .zen-current {
	top: 2px;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/tabs/themes/aloha/tabs.css
          postfix: 
   spritesEnabled: true */

.zen .zen-tabs a {
    font-weight: normal;
    color: #333;
}

.zen .zen-tabs .zen-body {
	border: 1px solid #eaeaea;
	-moz-border-radius: 4px;
	border-radius: 4px;
	border-top-width: 3px;
	border-top-color: #1797c0;
	background-color: #f8f8f8;
}

.zen .zen-tabControl a {
	text-decoration: none;
}

.zen .zen-tabControl li {
	border: 1px solid #e0e0e0;
	border-bottom: 0;
	background-color: #efefef;
	-moz-border-radius-topleft: 7px;	/* FF 3.6 */
	-moz-border-radius-topright: 7px;
	border-top-left-radius: 7px;
	border-top-right-radius: 7px;
	-moz-box-shadow: inset 0 0 2px #f6f6f6;
	-webkit-box-shadow: inset 0 0 2px #f6f6f6;
	box-shadow: inset 0 0 2px #f6f6f6;
}

.zen .zen-tabControl .zen-current {
	background-color: #f7f7f7;
	-moz-box-shadow: 2px -2px 2px #c8c8c8,-2px -2px 2px #c8c8c8,inset 0 3px 5px #e0e0e0;
	-webkit-box-shadow: 2px -2px 2px #c8c8c8,-2px -2px 2px #c8c8c8,inset 0 3px 5px #e0e0e0;
	box-shadow: 2px -2px 2px #c8c8c8,-2px -2px 2px #c8c8c8,inset 0 3px 5px #e0e0e0;
	border-width: 0;
}

.zen .zen-tabs .zen-header li:hover {
	background-color: #fff;
}

.zen .zen-tabs .zen-header .zen-current:hover {
	background-color: #efefef;
}

/* simple tabs*/
.zen .zen-simpleTabs .zen-body {
	border-top: 1px solid #eaeaea;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/callout/callout.css
          postfix: 
   spritesEnabled: true */

/**
 @component callout
 @brief A flexible box perfectly suited for hovers
 @requires box
 @cssObject zen-callout
 @javaElement common.html.zen.Callout
 
 @description
 A specialized type of container structurally similar to a Box component that provides information for an element,
 usually when that element is being hovered over or focused.
 
 For example, callouts are used in the sidebar’s Most Recently Used (MRU) list:
 upon hover or focus of any of the links, a callout appears showing the record details.
 
 Callouts usually (but not always) disappear from view on events such as mouseout, blur, or click.
 
 @instructions
 A Callout component requires two additional CSS classes to determine the position of the arrow that points to the element the Callout is describing.
 One parameter identifies the side of the box on which the arrow should appear (also the direction the arrow is pointing),
 the second identifies the position of the arrow itself along the corresponding box side.
 
 Sides:
 
 - `zen-sideNorth` - places the arrow along the top side of the box
 - `zen-sideEast` - places the arrow along the right side of the box
 - `zen-sideSouth` - places the arrow along the bottom side of the box
 - `zen-sideWest` - places the arrow along the left side of the box

 Arrows:

 - `zen-arrowLeft` - used with exclusively with sideNorth and sideSouth
 - `zen-arrowCenter` - used with exclusively with sideNorth and sideSouth
 - `zen-arrowRight` - used with exclusively with sideNorth and sideSouth
 - `zen-arrowTop` - used with exclusively with sideWest and sideEast
 - `zen-arrowMiddle` - used with exclusively with sideWest and sideEast
 - `zen-arrowBottom` - used with exclusively with sideWest and sideEast
 
 
 Javascript: TODO
 
 @extensibleExample
 <div class="zen-callout">
    <b class="zen-arrow"></b>
    <div class="zen-inner">
        <div class="zen-header"><h3>Callout Box</h3></div>
        <div class="zen-body">
            <p>
                Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore
                magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
            </p>
        </div>
        <div class="zen-footer"></div>
    </div>
 </div>
*/
.zen .zen-callout {
	margin: 5px;
	position: relative;
}

.zen .zen-callout .zen-arrow {
	position:absolute;
	background-repeat:no-repeat;
}

.zen .zen-callout .zen-inner {
	-moz-border-radius: 5px;
	border-radius: 5px;
	overflow: hidden;
}

/* "side" classes */

/**
 @extension sideNorth arrowLeft
 @extends callout
 @description Callout with classes zen-sideNorth + zen-arrowLeft
 
 @extension sideNorth arrowCenter
 @extends callout
 @description Callout with classes zen-sideNorth + zen-arrowCenter
 
 @extension sideNorth arrowRight
 @extends callout
 @description Callout with classes zen-sideNorth + zen-arrowRight
*/ 
.zen .zen-sideNorth {
	margin-top: 20px;
}

/**
 @extension sideEast arrowTop
 @extends callout
 @description Callout with classes zen-sideEast + zen-arrowTop
  
 @extension sideEast arrowMiddle
 @extends callout
 @description Callout with classes zen-sideEast + zen-arrowMiddle
   
 @extension sideEast arrowBottom
 @extends callout
 @description Callout with classes zen-sideEast + zen-arrowBottom
*/
.zen .zen-sideEast {
	margin-right: 16px;
}

/**
 @extension sideSouth arrowLeft
 @extends callout
 @description Callout with classes zen-sideSouth + zen-arrowLeft
 
 @extension sideSouth arrowCenter
 @extends callout
 @description Callout with classes zen-sideSouth + zen-arrowCenter
 
 @extension sideSouth arrowRight
 @extends callout
 @description Callout with classes zen-sideSouth + zen-arrowRight
*/ 
.zen .zen-sideSouth {
	margin-bottom: 16px;
}

/**
 @extension sideWest arrowTop
 @extends callout
 @description Callout with classes zen-sideWest + zen-arrowTop
  
 @extension sideWest arrowMiddle
 @extends callout
 @description Callout with classes zen-sideWest + zen-arrowMiddle
   
 @extension sideWest arrowBottom
 @extends callout
 @description Callout with classes zen-sideWest + zen-arrowBottom
*/
.zen .zen-sideWest {
	margin-left: 16px;
}

.zen .zen-sideNorth .zen-arrow,
.zen .zen-sideSouth .zen-arrow {
	width: 25px;
	height: 16px;
}

.zen .zen-sideEast .zen-arrow,
.zen .zen-sideWest .zen-arrow {
	width: 16px;
	height: 25px;
}

.zen .zen-sideNorth .zen-arrow {
	background-position: 1px -91px;
	top: -14px;
}

.zen .zen-sideEast .zen-arrow {
	background-position: 1px -28px;
	right: -13px;
}

.zen .zen-sideSouth .zen-arrow {
	background-position: 2px -60px;
	bottom: -14px;
}

.zen .zen-sideWest .zen-arrow {
	background-position: -2px 1px;
	left: -13px;
}

/* "arrow" classes */
.zen .zen-arrowLeft .zen-arrow {
	left: 15px;
}

.zen .zen-arrowCenter .zen-arrow {
	left: 50%;
	margin-left: -13px;
}

.zen .zen-arrowRight .zen-arrow {
	right: 15px;
}

.zen .zen-arrowTop .zen-arrow {
	top: 15px;
}

.zen .zen-arrowMiddle .zen-arrow {
	top: 50%;
	margin-top: -13px;
}

.zen .zen-arrowBottom .zen-arrow {
	bottom: 15px;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/callout/themes/aloha/callout.css
          postfix: 
   spritesEnabled: true */

/* skin: default */
.zen .zen-callout {
	border: 1px solid #c1C1C1;
	background-color: #fff;
	-moz-border-radius: 5px;
	border-radius: 5px;
	-moz-box-shadow: 0 2px 5px #a0a6ab;
	-webkit-box-shadow: 0 2px 5px #a0a6ab;
	box-shadow: 0 2px 5px #a0a6ab;
}

.zen .zen-callout .zen-arrow {
	background-image: url(/img/sprites/callout_arrows.png);
}

.zen .zen-hasActionsInHead .zen-header,
.zen .zen-hasActionsInFoot .zen-footer {
	background-color: #e9eaea;
}

/**
 @extension hasActionsInHead
 @extends callout
 
 Use this for callouts with links, buttons, or other actions at the *top* of the callout.
 This should only be used with the `zen-sideNorth` class, i.e., `zen-sideNorth zen-arrowLeft`, `zen-sideNorth zen-arrowMiddle` and `zen-sideNorth zen-arrowRight`.
 
 @example
 <div class="zen-callout zen-sideNorth zen-arrowLeft zen-hasActionsInHead">
    <b class="zen-arrow"></b>
    <div class="zen-inner">
        <div class="zen-header">
            <p><a href="javascript:void(0)">+ Follow</a> | <a href="javascript:void(0)">Send a private message</a></p>
        </div>
        <div class="zen-body">
            <div class="zen-line">
                <div class="zen-unit">
                    <p class="zen-mrm"><img src="http://lorempixel.com/75/75/people/9" height="75" width="75" alt="profile pic"/></p>
                </div>
                <div class="zen-unit zen-lastUnit">
                    <p>
                        <a href="javascript:void(0)">Alex Watson</a>
                        <br>
                        <span class="zen-note">SMTS on Platform Team</span>
                    </p>
                    <p>
                        (415) 901-2345 <span class="note">Work</span>
                    </p>
                </div>
            </div>  
        </div>
    </div>
 </div>
*/
.zen .zen-hasActionsInHead .zen-arrow {
	background-position: 1px -119px;
}

/**
 @extension hasActionsInFoot
 @extends callout
 
 Use this for callouts with links, buttons, or other actions at the *bottom* of the callout.
 This should only be used with `zen-sideSouth` class, i.e., `zen-sideSouth zen-arrowLeft`, `zen-sideSouth zen-arrowMiddle` and `zen-sideSouth zen-arrowRight`.
 
 @example
 <div class="zen-callout zen-sideSouth zen-arrowLeft zen-hasActionsInFoot">
    <b class="zen-arrow"></b>
    <div class="zen-inner">
        <div class="zen-body">
            <div class="zen-line">
                <div class="zen-unit">
                    <p class="zen-mrm"><img src="http://lorempixel.com/75/75/people/9" height="75" width="75" alt="profile pic"/></p>
                </div>
                <div class="zen-unit zen-lastUnit">
                    <p>
                        <a href="javascript:void(0)">Alex Watson</a>
                        <br>
                        <span class="zen-note">SMTS on Platform Team</span>
                    </p>
                    <p>
                        (415) 901-2345 <span class="note">Work</span>
                    </p>
                </div>
            </div>  
        </div>
        <div class="zen-footer">
            <p><a href="javascript:void(0)">+ Follow</a> | <a href="javascript:void(0)">Send a private message</a></p>
        </div>        
    </div>
 </div>
*/
.zen .zen-hasActionsInFoot .zen-arrow {
	background-position: 1px -148px;
}


/**
 @extension guidedTour
 @extends callout
 
 Adds the standard guided tour skin.
 
 @example
 <div class="zen-callout zen-guidedTour">
    <b class="zen-arrow"></b>
    <div class="zen-inner">
        <div class="zen-header"><h3>Callout + Guided Tour</h3></div>
        <div class="zen-body">
            <p>
                This is a simple guided tour without using any of the arrow extensions. You can use any of the standard arrow extensions
                on the guided tour as well. 
            </p>
        </div>
    </div>
 </div>
  
 @example
 <div class="zen-callout zen-sideWest zen-arrowMiddle zen-guidedTour">
    <b class="zen-arrow"></b>
    <div class="zen-inner">
        <div class="zen-header"><h3>Callout + Guided Tour</h3></div>
        <div class="zen-body">
            <p>
                The guided tour is often used to introduce new features by pointing directly at the feature on the page and providing a description.
                They are used as one-time single-feature callouts, as well as full-fledged wizards to introduce multiple features on the page
                in succession. 
            </p>
        </div>
    </div>
 </div>
*/
.zen .zen-guidedTour .zen-arrow {
	background-image: url(/img/sprites/callout_arrows_guided_tours.png);
}

.zen .zen-guidedTour .zen-inner {
	border: 2px solid #fff;
	background-color: #fedF95;
}

/* TODO what is this? */
.zen .zen-callout .chatterHover {
	min-width: 272px;
	padding: 10px;
}

.zen .zen-callout .chatterHover .zen-mediaBody {
	width: auto;
	max-width: 191px;
}

.zen .zen-callout .chatterHover .name {
	font-size: 1.2em;
	color: #015ba7;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/media/media.css
          postfix: 
   spritesEnabled: true */

/**
 @component media
 @brief Image to left, content to the right
 @requires box
 
 @cssObject zen-media
 @javaElement common.html.zen.MediaBlock
 @javaElement common.html.zen.InlineMediaBlock
    
 The media block is a UI pattern of an image to the left and some text (or really anything) that
 describes it to the right. The image can be any size. The media block has an optional right
 region which should also be **fixed width**.

 @extensibleExample
 <div class="zen-media">
    <a class="zen-img" href="javascript:void(0);"><img src="http://placehold.it/50x50" alt="sample image"></a>
    <div class="zen-mediaBody">
        This text will usually describe or be related in some way to the image on the left.
        A common example of a media block is a chatter post, with the user's picture on the left
        and their comment on the right.
    </div>
 </div>
    
 @example
 <div class="zen-media">
    <a  class="zen-img" href="javascript:void(0);"><img src="http://placehold.it/128x128" alt="sample image"/></a>
    <div class="zen-mediaBody">
        <p class="zen-mtn">
            You can nest media blocks inside of other media blocks as well.
            Media blocks are extremely flexible; feel free to try and use them in different ways
            to see how you can reduce your amount of code!
        </p>
        <div class="zen-media">
            <a class="zen-img zen-mrs" href="javascript:void(0);">
                <img src="http://placehold.it/16x16&text=+" alt="sample image">
            </a>
            <div class="zen-mediaBody">This is a nested media block.</div>
        </div>
    </div>
 </div>
 
 @example
 <div class="zen-media">
    <!-- left -->
    <a href="javascript:void(0);" class="zen-img">
        <img src="http://placehold.it/92x92&text=Left" alt="img" width="92" height="92">
    </a>
    <!-- right -->
    <a href="javascript:void(0);" class="zen-imgExt">
        <img src="http://placehold.it/92x92&text=Right" alt="img" width="92" height="92">
    </a>
    <div class="zen-mediaBody">
        <p class="zen-mtn">Images can be right, left, or both.</p>
        <p>
            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor 
            incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud
            exercitation ullamco laboris nisi ut aliquip ex ea comm.
        </p>
    </div>
 </div>
*/

.zen .zen-media:after,
.zen .zen-mediaBody:after { /*clearfix */
    clear: both;
    display: block;
    visibility: hidden;
    overflow: hidden;
    height: 0 !important;
    line-height: 0;
    content: ".";
}

.zen .zen-mediaBody {
    display: table-cell; /* new formatting context */
    width: 1000em;
}

.zen .zen-img {
	float: left;
	background-repeat: no-repeat;
	margin-right: 10px;
}
.zen .zen-img img {
    display: block;
}

.zen .zen-imgExt {
    float: right; 
    margin-left: 10px;
}


/* tiny icon and text in an inline list */
/**
 @extension mediaExt
 @extends media
 
 Occasionally you will need a media block where the text centers vertically with respect to the image.
 In this case you want to use the mediaExt class. The html for this class is a bit different,
 it requires that you use spans instead of divs (for IE support) and the imgExt should come after the mediaBody.
 It cannot contain block level elements. 
 
 As you can see it is pretty limited, and should only be used in cases
 where a normal media block doesn't work, even with special spacing classes applied.
 
 @example
 <span class="zen-media zen-mediaExt">
    <a class="zen-img" href="javascript:void(0);"><img alt="zen-img" src="http://placehold.it/64x64"></a>
    <span class="zen-mediaBody">This text is vertically aligned in the center.</span>
 </span>
*/
.zen .zen-mediaExt {
    white-space: nowrap;
}
    
.zen .zen-mediaExt,
.zen .zen-mediaExt .zen-img,
.zen .zen-mediaExt img,
.zen .zen-mediaExt .zen-imgExt,
.zen .zen-mediaExt .zen-mediaBody {
    display: inline;
    display: inline-block; 
    vertical-align: middle;
    width: auto;
}

.zen .zen-mediaExt:after,
.zen .zen-mediaExt .zen-mediaBody:after {
    content: "";
}
.zen .zen-mediaExt .zen-img {
    margin: 0;
    margin-right: 5px;
    float: none;
}

.zen .zen-mediaExt .zen-imgExt {
    margin: 0;
    margin-left: 5px;
    float: none;
}

.zen .zen-mediaExt a,
.zen .zen-mediaExt img {
	vertical-align: middle;
	display: inline;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/form/form.css
          postfix: 
   spritesEnabled: true */

/**
 @componentGroup forms
 @brief input boxes, labels, checkboxes, radio boxes and more
 @cssObject zenForm
 
 @description
 There are several base form elements which may be combined to create unique forms.
 
 If you have a list of non-editable fields or data, and the label for each field should look
 like a form label, try looking into the "DetailList" component instead.
*/	

/** 
 @groupMember form labels
 
 To apply the standard form behavior for labels, ensure they are inside of a form with class `zen-form`.
 The label will be aligned to the right and bolded, among other changes.
 
 @example
 <form class="zen-form">
    <label for="labelExampleInput">Email</label>
    <input class="zen-input" name="yourInputName" id="labelExampleInput" />
 </form>
 
 @example
 <form class="zen-form">
    <label for="labelExampleInput2">
        If the label is really really really long it should wrap and vertically align nicely
    </label>
    <input class="zen-input" name="yourInputName" id="labelExampleInput2" />
 </form>
 
 @groupMember label facade
 @description If you ever need to style a non-label to look/render like a label, add the `zen-label` class.
 @example
 <form class="zen-form">
     <span class="zen-label">I look like a label</span>
 </form>
*/
.zen .zen-label,
.zen .zen-form label {
    color: #4a4a56;
    font-size: .917em; /* 11px */
    font-weight: bold;
}

/* labels inside of forms get extra alignment/spacing treatment */
.zen .zen-form label,
.zen .zen-form .zen-label {
    width: 200px;
    display: inline-block;
    text-align: right;
    vertical-align: middle;
    margin-top: 5px;
    margin-right: 20px;
    float: left;
    clear: left;
}

/** 
 @groupMember form
 
 The `<form>` element must have the class `zen-form` applied to it in order for most of the form elements to be styled correctly.
 
 @extensibleOnlyExample
 <form class="zen-form">
    <label for="formExample#{number}">First Name</label>
    <input class="zen-input" name="yourInputName" id="formExample#{number}" value="Marc">
 </form>
 */
.zen .zen-form:before,
.zen .zen-form:after { /* clearfix */
    content: ""; 
    display: table;
}

.zen .zen-form:after {
    clear: both;
}

/**
 @extension labelSmall
 @extends form
*/
.zen .zen-labelSmall label,
.zen .zen-labelSmall .zen-label {
	width: 65px;
}

/**
 @extension labelMedium
 @extends form
*/
.zen .zen-labelMedium label,
.zen .zen-labelMedium .zen-label {
    width: 120px;
}

/**
 @extension labelLarge
 @extends form
*/
.zen .zen-labelLarge label,
.zen .zen-labelLarge .zen-label {
    width: 280px;
}

/**
 @extension inlineForm
 @extends form
 
 Inline forms do not specify the width of the labels. You can place it on the form element,
 or on any container element inside of the form.
*/
.zen .zen-inlineForm .zen-label,
.zen .zen-inlineForm label {
    width: auto; /* removes set input width for a one line form, aligns left */
    margin-right: 5px;
}

/**
 @extension skinnyForm
 @extends form
 
 Use this for forms in layouts of small horizontal widths. It will display the label on top
 of the input instead of beside it. You can place the class on the `form` element itself, or
 on a container element inside of the form if that is appropriate (e.g., a `div` or `li`).
*/
.zen .zen-skinnyForm .zen-label,
.zen .zen-skinnyForm label {
    width: auto;
    display: block;
    text-align: left;
    float: none;
    margin-bottom: 2px;
}

.zen .zen-skinnyForm .zen-help {
    margin-left: 5px;
}

.zen .zen-formBody {
    /*keeps the label and inputs in separate columns where the input column has multiple lines, e.g., help text*/
    display: inline-block;
}

/**
 @groupMember input
 @description Input text fields are mainly used for standard data entry and search. 
 @extensibleExample <form class="zen-form"><!-- your label element here --> <input class="zen-input" /></form>
*/
.zen .zen-input {
	box-sizing: border-box;
	padding: 3px;
	margin: 1px 0;
}

/**
 @extension inputTiny
 @extends input
*/
.zen .zen-inputTiny {
	width: 30px;
}

/**
 @extension inputSmall
 @extends input
*/
.zen .zen-inputSmall {
	width: 150px;
}

/**
 @extension inputMedium
 @extends input
*/
.zen .zen-inputMedium {
	width: 250px;
}

/**
 @extension inputLarge
 @extends input
*/
.zen .zen-inputLarge {
	width: 350px;
}

/**
 @extension inputFull
 @extends input
*/
.zen .zen-inputFull {
	width: 100%;
}

/**
 @groupMember textarea
 
 Textareas are used for longer text values. You can apply any of the same sizing extensions used on regular input fields to 
 textareas as well.
  
 @example
 <form class="zen-form">
    <label for="smTextArea">Address</label>
    <textarea class="zen-input zen-inputSmall" name="yourInputName" id="smTextArea">The Landmark @ 1 Market</textarea>
 </form>
 
 @example
 <form class="zen-form">
    <label for="medTextArea">Address</label>
    <textarea class="zen-input zen-inputMedium" name="yourInputName" id="medTextArea">The Landmark @ 1 Market</textarea>
 </form>
 
 @example
 <form class="zen-form">
    <label for="lgTextArea">Address</label>
    <textarea class="zen-input zen-inputLarge" name="yourInputName" id="lgTextArea">The Landmark @ 1 Market</textarea>
 </form>
*/
.zen .zen-form textarea {
	vertical-align: top;
	padding: 4px;
	box-sizing: border-box;
}

.zen .zen-form .zen-input,
.zen .zen-form textarea {
    -moz-border-radius: 4px;
    -webkit-border-radius: 4px;
    border-radius: 4px;
    -moz-box-shadow: inset 0 1px 0 #c3c3c3;
    -webkit-box-shadow: inset 0 1px 0 #c3c3c3;
    box-shadow: inset 0 1px 0 #c3c3c3;
    border: 1px solid gray;
    border-color: #7c7c7c #c3c3c3 #ddd;
}

/**
 @groupMember requiredMark
 
 Required fields should have a span with class `zen-requiredMark` *inside* the label.
 
 @example
 <form class="zen-form">
    <label for="requiredExample1">
        <span class="zen-requiredMark">*</span>
        Email
    </label>
    <input class="zen-input zen-inputMedium" name="yourInputName" id="requiredExample1" value="programmer@salesforcedev.com" />
 </form>
 
 @example
 <form class="zen-form">
    <label for="requiredExample2">
        <span class="zen-requiredMark">*</span>
        Street
    </label>
    <textarea class="zen-inputMedium" name="yourInputName" id="requiredExample2">The Landmark @ 1 Market</textarea>
 </form>
*/
.zen .zen-form .zen-requiredMark {
	color: #C00;
	padding-right: 1px;
}

/**
 @groupMember help
 
 Help text is sometimes used to further explain an input field, or to give example input values.
 
 __NOTE:__ When using help text, the input field and help text elements must be inside of a div
 with class `zen-formBody`. Keep in mind that there is no harm in wrapping your input inside of a
 `zen-formBody` even if you do not have help text. 
 
 For accessibility there is an `aria-describedby` attribute on the input. The help text element
 also has `tabindex="-1"` to help make the aria attribute work in IE. 
 
 @example
 <form class="zen-form">
    <label for="helpExample">Object Name</label>
    <div class="zen-formBody">
        <input class="zen-input" name="yourInputName" id="helpExample" aria-describedby="helpTextId" />
        <p class="zen-help" id="helpTextId" tabindex="-1">Here is some very helpful text</p>
    </div>
 </form>
*/
.zen .zen-help {
	margin-top: 3px;
	clear: left;
	color: #767676;
}

/**
 @groupMember errorMessage
 
 Used to display an error message to the user, usually when they entered invalid data into a field.
 
  __NOTE:__ If an error message can appear next to a form field, the input field and `zen-errorMessage` elements
  must be inside of a div with class `zen-formBody`. Keep in mind that there is no harm in wrapping
  your input inside of a `zen-formBody` even if an error message is never shown. When the error message is visible,
  the `zen-formError` class should be added to `zen-formBody`.
 
 For accessibility there is an `aria-describedby` attribute on the input. The `zen-errorMessage` element
 also has `tabindex="-1"` to help make the aria attribute work in IE.
 
 @example
 <form class="zen-form">
    <label for="errorExample">Account Name</label>
    <div class="zen-formBody zen-formError">
        <input class="zen-input" name="yourInputName" id="errorExample" aria-describedby="errorMessageId" />
        <p class="zen-errorMessage" id="errorMessageId" tabindex="-1"><strong>Error:</strong> You must enter a value</p>
    </div>
 </form> 
*/
.zen .zen-errorMessage {
	color: #d74c3b;
	margin-top: 3px;
}

/**
 @groupMember formFieldInfo
 
 Form form fields with an info icon next to them.
 
 @example
 <form class="zen-form">
    <label for="fieldInfoExample">Account Name</label>
    <input class="zen-input zen-inputSmall" name="yourInputName" id="fieldInfoExample" />
    <img class="infoIcon zen-formFieldInfo" src="/s.gif" alt="Lookup Account Name" />
 </form>
*/
.zen .zen-formFieldInfo {
	vertical-align: top;
	margin-top: 4px;
}

/**
 @groupMember formFieldAction
 
 For form fields with associated actions next to them, such as lookup fields. They actions are represented by icon images.
 
 @example
 <form class="zen-form">
    <label for="fieldActionExample">Account Name</label>
    <input class="zen-input zen-inputSmall" name="yourInputName" id="fieldActionExample" />
    <a href="javascript:void(0);" class="zen-formFieldAction">
        <img class="lookupIcon" src="/s.gif" alt="Lookup Account Name" />
    </a>
 </form>
*/
.zen .zen-formFieldAction {
    margin:4px;
    position:relative;
}

.zen .zen-formFieldAction img {
	vertical-align: middle;
}

.zen .zen-formFieldAction:active {
    bottom:-1px;
}

/**
 @groupMember checkGroup
 
 Used for groups of check boxes or radio buttons.
 The radio buttons or check boxes should be inside of a list with class `zen-formBody'.
 
 @example
 <form class="zen-form">
    <fieldset class="zen-checkGroup">
	    <legend class="zen-label">Radio Group</legend>
        <ul class="zen-formBody">
            <li>
                <label for="radioOption1">
                    <input type="radio" name="groupfoo" id="radioOption1" value="0">
                    option 1
                </label>
            </li>
            <li>
                <label for="radioOption2">
                    <input type="radio" name="groupfoo" id="radioOption2" value="1">
                    option 2
                </label>
            </li>
            <li>
                <label for="radioOption3">
                    <input type="radio" name="groupfoo" id="radioOption3" value="2">
                    option 3
                </label>
            </li>                        
        </ul>
    </fieldset>
 </form>
 
 @example
 <form class="zen-form">
    <fieldset class="zen-checkGroup">
        <legend class="zen-label">Checkbox Group</legend>
        <ul class="zen-formBody">
            <li>
                <label for="checkOption1">
                    <input type="checkbox" name="yourInputName" id="checkOption1" value="0">
                    option 1
                </label>
            </li>
            <li>
                <label for="checkOption2">
                    <input type="checkbox" name="yourInputName" id="checkOption2" value="1">
                    option 2
                </label>
            </li>
            <li>
                <label for="checkOption3">
                    <input type="checkbox" name="yourInputName" id="checkOption3" value="2">
                    option 3
                </label>
            </li>                        
        </ul>
    </fieldset>
 </form>
*/
.zen .zen-checkGroup label {
	float: none;
	width: auto;
	text-align: left;
	margin-top: 0;
	font-weight: normal;
}

.zen .zen-checkGroup > ul {
	margin-top: 0;
	margin-bottom: 0;
}

/**
 @groupMember selectBox
 
 The standard form select box.
 
 @example
 <form class="zen-form">
    <label for="selectExample">Select</label>
    <select name="yourInputName" id="selectExample">
      <option>option 1</option>
      <option>option 2</option>
      <option>option 3</option>
    </select>
 </form> 
*/


/**
 @groupMember progress
 
 An indicator of how acceptable a field value is. For example, the strength of a new password.
 
 @extensibleExample
 <form class="zen-form">
    <label for="progressExample">New Password</label>
    <input class="zen-input" type="password" name="yourInputName" id="progressExample" aria-describedby="passwordHelpTextId" />
    <span class="zen-progress">
        <span class="zen-value">&nbsp;</span>
    </span>
    <span id="passwordHelpTextId">(Describe the password strength here)</span>
    <img class="infoIcon zen-formFieldInfo" src="/s.gif" alt="Password Strength Information" />
 </form> 
*/
.zen .zen-progress {
    display: inline-block;
    -moz-border-radius: 7px;
    -webkit-border-radius: 7px;
    border-radius: 7px;
    background-color: #ccc;
    -moz-box-shadow: inset 1px 1px 3px #8d8d8d;
    -webkit-box-shadow: inset 1px 1px 3px #8d8d8d;
    box-shadow: inset 1px 1px 3px #8d8d8d;
    width: 50px;
}

/**
 @componentSection value
 @sectionOf progress
*/
.zen .zen-value {
    display: inline-block;
    -moz-border-radius: 7px;
    -webkit-border-radius: 7px;
    border-radius: 7px;
    -moz-box-shadow: inset 1px 1px 3px #8d8d8d;
    -webkit-box-shadow: inset 1px 1px 3px #8d8d8d;
    box-shadow: inset 1px 1px 3px #8d8d8d;
    visibility: hidden;
}

/**
 @extension valueNotOk
 @extends progress.value
 @description Indicates that the form value is not ok.
*/
.zen .zen-valueNotOk {
    width: 25%;
    background-color: #c33929;
    visibility: visible;
}

/**
 @extension valueOk
 @extends progress.value
 @description Indicates that the form value is acceptable.
*/
.zen .zen-valueOk {
    width: 50%;
    background-color: #f8c933;
    visibility: visible;
}

/**
 @extension valueStrong
 @extends progress.value
 @description Indicates that the form value is strong, or exceeds what's considered acceptable.
*/
.zen .zen-valueStrong {
    width: 100%;
    background-color: #74c205;
    visibility: visible;
}

/**
 @groupMember readOnly

 For non-editable fields, the input field should have the `readonly` attribute set on it.
 
 @example
 <form class="zen-form">
    <label for="readonlyExample">User Name (Ready Only)</label>
    <input class="zen-input" readonly="readonly" value="Alex Watson" name="yourInputName" id="readonlyExample" />
 </form>
*/

/* TODO NM: example of a form with multiple lines of fields using an ul */



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/select/select.css
          postfix: 
   spritesEnabled: true */

/**
 @componentGroup buttons
 @cssObject zen-select
*/

/**
 @groupMember select
 @requires buttons
 
 A dropdown styled the same way as the promo button.
 
 @example
 <div class="zen-select" data-sfdc-widget="SfdcCmp.Dropdown">
    <a class="zen-trigger zen-btn zen-promoBtn" href="javascript:void(0);" title="open submenu">
        <b class="zen-selectArrow"></b>
        Dropdown Menu
    </a>
    <ul class="zen-options">
        <li><a href="javascript:void(0);" role="menuitem">option 1</a></li>
        <li><hr class="zen-divider" role="separator"/></li>
        <li><a href="javascript:void(0);" role="menuitem">option 2</a></li>
        <li class="zen-disabled"><a href="javascript:void(0);" role="menuitem" aria-disabled="true">option 3 <span class="zen-assistiveText">Unavailable</span></a></li>
        <li><a href="javascript:void(0);" role="menuitem">option 3</a></li>
    </ul>
 </div>
*/
.zen .zen-select {
	width: 200px;
	position: relative;
	margin: 0 10px;
	z-index: 99;
}

.zen .zen-select .zen-trigger {
	text-align: left;
	display: block;
}

.zen .zen-select .zen-selectArrow {
	float: right;
	display: block;
	width: 0;
	height: 0;
	margin-top: 5px;
}

.zen .zen-options {
	position: absolute;
	top: 100%;
	left: 3px;
	margin: 0;
	display: none;
	overflow: hidden;
}

.zen .zen-open .zen-options { /* JS should apply the class "zen-open" */
	display: block;
}

.zen .zen-options a {
	display: block;
	padding: 3px;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/select/themes/aloha/select.css
          postfix: 
   spritesEnabled: true */

.zen .zen-select .zen-selectArrow {
	border-style: solid;
	border-width: 5px 4px 0;
	border-color: #fff transparent transparent;
}

.zen .zen-options {
	border: 1px solid #4997bf;
	background-color :#fff;
	-moz-box-shadow: 0 0 4px #b1b2b4;
	-webkit-box-shadow: 0 0 4px #b1b2b4;
	box-shadow: 0 0 4px #b1b2b4;
	width: 192px;
}

.zen .zen-open .zen-options { /* JS should apply the class "zen-open" */
	display: block;
}

.zen .zen-options a {
	color: #000;
	text-decoration: none;
}

.zen .zen-options a:hover,
.zen .zen-options a:focus {
	color: #015ba7;
	background-color: #e3f3ff;
	text-decoration: none;
	outline: none;
}

.zen .zen-options .zen-disabled {
	color:#c2c2c2;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/heading/heading.css
          postfix: 
   spritesEnabled: true */

/**
 @componentGroup headings
 @brief basic heading tags
 @cssObject zen-heading
 
 A Heading component is any one of the HTML heading tags -- `<h1>`, `<h2>`, `<h3>`, `<h4>`, `<h5>`, and `<h6>` --
 which describes a document's outline. For screen readers, they typically serve as navigation markers on a page.
 
 Each header tag also has a namesake CSS class that determines the font size for a particular heading level,
 in case you need to divorce the size of a heading from its semantically correct position in the document's outline.
 
 @groupMember h1
 @example <h1>Heading 1</h1>
 
 @groupMember h2
 @example <h2>Heading 2</h2>
 
 @groupMember h3
 @example <h3>Heading 3</h3>
 
 @groupMember h4
 @example <h4>Heading 4</h4>
 
 @groupMember h5
 @example <h5>Heading 5</h5>
 
 @groupMember h6
 @example <h6>Heading 6</h6>
 
 @groupMember headingFacade
 @description
 
 Used to maintain semantically correct heading levels when the design is inconsistent.
 There are `.zen-h1` through `.zen-h6` classes.
              
 @example <h3 class="zen-h5">H5 styling on an H3 tag</h3>
 @example <h3 class="zen-h6">H6 styling on an H1 tag</h3>
*/

/**
 @groupMember stacked
 @description The first level heading can also have a smaller bit of important text above it.
 @example <h1><strong>important text</strong> Heading 1</h1>
*/
.zen h1 strong,
.zen .h1 strong {
    display: block;
    padding-left: 1px;
}

/**
 @groupMember inlineHeading
 
 Use when you need a heading displayed inline on the page.
 It will also remove all preset margins.
 
 @example
 <h1 class="zen-inlineHeading zen-h6">My Heading</h1>
 <span class="zen-mlm">Some Text</span>
*/
.zen .zen-inlineHeading {
	margin: 0;
	display: inline-block;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/heading/themes/aloha/heading.css
          postfix: 
   spritesEnabled: true */

.zen h1,
.zen h2,
.zen h3,
.zen h4,
.zen h5,
.zen h6,
.zen .zen-h1,
.zen .zen-h2,
.zen .zen-h3,
.zen .zen-h4,
.zen .zen-h5,
.zen .zen-h6 {
    font-weight: bold;
}

.zen h1,
.zen .zen-h1 {
    font-size: 1.833em;      /* 22px - based on browser default font size of 12px */
    font-weight: normal;
}

/* used in page header titles */
.zen h1 strong,
.zen .zen-h1 strong {      
    font-size: .5em;         /* 11px - based on browser default font size of 12px */
    font-weight: bold;
    margin-bottom: -3px;
}

.zen h2,
.zen .zen-h2 {
    font-size: 1.667em;      /* 20px - based on browser default font size of 12px */
}

.zen h3,
.zen .zen-h3 {
    font-size: 1.5em;        /* 18px - based on browser default font size of 12px */
}

.zen h4,
.zen .zen-h4 {
    font-size: 1.333em;      /* 16px - based on browser default font size of 12px */
}

.zen h5,
.zen .zen-h5 {
    font-size: 1.167em;      /* 14px - based on browser default font size of 12px */
}

.zen h6,
.zen .zen-h6 {
    font-size: 1em;          /* 12px - based on browser default font size of 12px */
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/spacing/space.css
          postfix: 
   spritesEnabled: true */

/* ====== Default spacing ====== */
.zen h1,
.zen h2,
.zen h3,
.zen h4,
.zen h5,
.zen h6,
.zen dl,
.zen p,
.zen blockquote,
.zen .zen-box,
.zen pre {
	margin: 10px 0;
}

.zen .zen-header h1,
.zen .zen-header h2,
.zen .zen-header h3,
.zen .zen-header h4,
.zen .zen-header h5,
.zen .zen-header h6 {
	margin: 5px 0;
}

.zen h1,
.zen h2,
.zen h3,
.zen h4,
.zen h5,
.zen h6,
.zen img {
	padding-bottom: 0;
}

.zen table h1,
.zen table h2,
.zen table h3,
.zen table h4,
.zen table h5,
.zen table h6,
.zen table p,
.zen table ul,
.zen table ol,
.zen table dl {
	padding: 0;
}

.zen .zen-header,
.zen .zen-body,
.zen .zen-footer,
.zen .zen-intro {
    padding: 0 7px;
}

/*
.media .bd > :first-child{
	margin-top:0;
}
.media .bd > :last-child{
	margin-bottom:0;
}
*/ 

/**
 @component spacing
 @brief margin and padding between components
 @cssObject zen-space
 
 @description
 A Spacing component is used for applying pre-defined margin and/or padding to any element.
 Spacing components are used for structural layout only (i.e., they are not "skinned").
 
 Left and right spacing will automatically be reversed in right-to-left languages.
 
 @instructions
 Most elements will have the correct spacing by default, so in most cases, Spacing classes will **not** be needed.
 However, if you need to tweak elements by using margin or padding, use these classes rather than adding to the CSS file.
 
 Only use these to tweak **existing components** rather than using them to specify the default spacing for a a custom component
 or custom code. They should only be used to modify the default spacing between objects (not between nodes of the same object).
 
 Please use judiciously. You want to be using defaults most of the time, these are exceptions! 
 If you find yourself using more than a small sprinkling of Spacing components then **most likely you are misusing them**.
 
 To use a Spacing component, three elements must be specified in order of <type><location><size>:
 
 1. The type of spacing desired (e.g., "margin" or "padding")
 2. The amount of spacing desired (e.g., "small", "medium", "large", or "none")
 3. The location to which the spacing should be applied ("top", "right", "bottom", "left", "vertical", "horizontal", or "all")

 Specifically:
 
 Type:
 
 - `p`  *(padding)*    Space on the inside of the element
 - `m`  *(margin)*     Space on the outside of the element

 Location:
 
 - `a`  *(all)*        Adds spacing on all sides of the element
 - `t`  *(top)*        Adds spacing to the top of the element
 - `r`  *(right)*      Adds spacing to the right of the element
 - `b`  *(bottom)*     Adds spacing to the bottom of the element
 - `l`  *(left)*       Adds spacing to the left of the element
 - `h`  *(horizontal)* Adds spacing to the right and left of the element
 - `v`  *(vertical)*   Adds spacing to the top and bottom the element

 Size:
 
 - `l`  *(large)*      Adds 20 pixels of space
 - `m`  *(medium)*     Adds 10 pixels of space
 - `s`  *(small)*      Adds 5 pixels of space
 - `n`  *(none)*       Sets any existing space to 0

 For instance, a class of `zen-ptm` indicates that you want padding, on the top, and size medium. 
 A class of `zen-mvs` indicates that you want margin, top and bottom, size small.
 
 @example <p class="zen-pal">This paragraph has 20px padding on all sides.</p>
 @example <h1 class="zen-mvs">Account Detail</h1>
*/
.zen .zen-ptn,
.zen .zen-pvn,
.zen .zen-pan {
    padding-top: 0 !important;
}

.zen .zen-pts,
.zen .zen-pvs,
.zen .zen-pas {
    padding-top: 5px !important;
}

.zen .zen-ptm,
.zen .zen-pvm,
.zen .zen-pam {
    padding-top: 10px !important;
}

.zen .zen-ptl,
.zen .zen-pvl,
.zen .zen-pal {
    padding-top: 20px !important;
}

.zen .zen-prn,
.zen .zen-phn,
.zen .zen-pan {
    padding-right: 0 !important;
}

.zen .zen-prs,
.zen .zen-phs,
.zen .zen-pas {
    padding-right: 5px !important;
}

.zen .zen-prm,
.zen .zen-phm,
.zen .zen-pam {
    padding-right: 10px !important;
}

.zen .zen-prl,
.zen .zen-phl,
.zen .zen-pal {
    padding-right: 20px !important;
}

.zen .zen-pbn,
.zen .zen-pvn,
.zen .zen-pan {
    padding-bottom: 0 !important;
}

.zen .zen-pbs,
.zen .zen-pvs,
.zen .zen-pas {
    padding-bottom: 5px !important;
}

.zen .zen-pbm,
.zen .zen-pvm,
.zen .zen-pam {
    padding-bottom: 10px !important;
}

.zen .zen-pbl,
.zen .zen-pvl,
.zen .zen-pal {
    padding-bottom: 20px !important;
}

.zen .zen-pln,
.zen .zen-phn,
.zen .zen-pan {
    padding-left: 0 !important;
}

.zen .zen-pls,
.zen .zen-phs,
.zen .zen-pas {
    padding-left: 5px !important;
}

.zen .zen-plm,
.zen .zen-phm,
.zen .zen-pam {
    padding-left: 10px !important;
}

.zen .zen-pll,
.zen .zen-phl,
.zen .zen-pal {
    padding-left: 20px !important;
}

.zen .zen-mtn,
.zen .zen-mvn,
.zen .zen-man {
    margin-top: 0 !important;
}

.zen .zen-mts,
.zen .zen-mvs,
.zen .zen-mas {
    margin-top: 5px !important;
}

.zen .zen-mtm,
.zen .zen-mvm,
.zen .zen-mam {
    margin-top: 10px !important;
}

.zen .zen-mtl,
.zen .zen-mvl,
.zen .zen-mal {
    margin-top:20px !important;
}

.zen .zen-mrn,
.zen .zen-mhn,
.zen .zen-man {
    margin-right: 0 !important;
}

.zen .zen-mrs,
.zen .zen-mhs,
.zen .zen-mas {
    margin-right: 5px !important;
}

.zen .zen-mrm,
.zen .zen-mhm,
.zen .zen-mam {
    margin-right: 10px !important;
}

.zen .zen-mrl,
.zen .zen-mhl,
.zen .zen-mal {
    margin-right: 20px !important;
}

.zen .zen-mbn,
.zen .zen-mvn,
.zen .zen-man {
    margin-bottom: 0 !important;
}

.zen .zen-mbs,
.zen .zen-mvs,
.zen .zen-mas {
    margin-bottom: 5px !important;
}

.zen .zen-mbm,
.zen .zen-mvm,
.zen .zen-mam {
    margin-bottom: 10px !important;
}

.zen .zen-mbl,
.zen .zen-mvl,
.zen .zen-mal {
    margin-bottom: 20px !important;
}

.zen .zen-mln,
.zen .zen-mhn,
.zen .zen-man {
    margin-left: 0 !important;
}

.zen .zen-mls,
.zen .zen-mhs,
.zen .zen-mas {
    margin-left: 5px !important;
}

.zen .zen-mlm,
.zen .zen-mhm,
.zen .zen-mam {
    margin-left: 10px !important;
}

.zen .zen-mll,
.zen .zen-mhl,
.zen .zen-mal {
    margin-left: 20px !important;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/links/themes/aloha/links.css
          postfix: 
   spritesEnabled: true */

/**
 @componentGroup links
 @brief styles and hover behaviors for anchor tags
 @cssObject zenComponents
 
 This collection provides a set of classes that can be applied to `<a>` tags, as well as defines the 
 default style of links.
*/

/*
 @groupMember default

 The default link component represents the default style and behavior that any non-special (see components below) link should have.
 It does not need any special class applied to it.
 
 @example <a href="javascript:void(0);">A standard link</a>
*/

/*
 @groupMember lowlight

 A Lowlight component is used for `<a>` tags that are relatively less important than other items in their current context.
 That is, a link that is not crucial to the task being performed. For example, a link that opens up a help window with additional
 details on the information currently presented on the page.
 
 @example <a class="zen-lowlight" href="javascript:void(0)">View Archived Information</a>
*/
.zen .zen-lowlight {
    /* color:#797979; needs to be cleared w/ vahn first - not currently used */
}

/**
 @groupMember midlight
 A Midlight component is used for `<a>` tags that are of moderate importance, compared to other items in their context.
 
 @example <a class="zen-midlight" href="javascript:void(0)">Check for Additional Discounts</a>
*/
.zen .zen-midlight {
    font-weight: bold;
}

/*
 @groupMember highlight
 A Highlight component is used for `<a>` tags that are of higher importance, compared to other items in their context.
 For example, a link that redirects a power user to an advanced interface to complete their task more quickly.
  
 @example <a class="zen-highlight" href="javascript:void(0)">Use Advanced Admin Console</a>
*/
.zen .zen-highlight {
    /* color:#000; needs to be cleared w/ vahn first - not currently used
    font-weight:bold; */
}

/*
 @groupMember healthyPlanet
 TODO (Do we even want to document this? It's kind of a one-off.)
 A Healthy Planet component is used for `<a>` tags that direct users to the Recycle Bin.
 
 @example <a class="zen-healthyPlanet" "javascript:void(0)">Recycle Bin</a>
*/
.zen .zen-healthyPlanet {
    color: #360;
}

/**
 @groupMember goToRecord
 @description A Go To Record component is used for `<a>` tags that link to a record or report detail page.
 @example <a class="zen-goToRecord" href="javascript:void(0);">John Adams</a>
*/
.zen .zen-goToRecord {
	color: #222;
    font-weight: normal;
    text-decoration: underline;
}

a.zen-goToRecord:hover {
    color: #2861a1;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/text/text.css
          postfix: 
   spritesEnabled: true */

/**
 @componentGroup text
 @brief A collection of text treatments
 @cssObject zen-text
 
 There are several text treatements you can use to change how text is presented. They can be applied
 to any element, but generally you should use them on leaf nodes like `p`, `span`, `em`, and `strong`.
*/

/**
 @groupMember strong
 @description Used for text that needs a strong emphasis, in terms of importance.
 @example <p>If we don't fix this bug, <strong>Merrill Lynch</strong> will go nuts!</p>
*/
.zen strong {
    font-weight: bold;
}

/**
 @groupMember emphasis
 @description Used to stress pronunciation emphasis, i.e., something that you would pronounce differently.
 @example <p>If we don't fix this bug, Merrill Lynch will go <em>nuts!</em></p>
*/
.zen em {
    font-style: italic;
}

/**
 @groupMember date
 @example <span class="zen-date">August 4, 2010</span>
*/
.zen .zen-date {
    color: gray;
    font-size: .917em;
}

/**
 @groupMember note
 @example <span class="zen-note">where do we actually use something like this in the app?</span>
*/
.zen .zen-note {
    color: gray;
    font-style: italic;
}

/**
 @groupMember legal
 @example <span class="zen-legal">Copyright 2010 Salesforce.com. All rights reserved.</span>
*/
.zen .zen-legal {
    font-size: .917em;
}

/**
 @groupMember deemphasize
 @example <span class="zen-deemphasize">This text doesn't need to stand out.</span>
*/
.zen .zen-deemphasize {
    font-size: .917em;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/list/list.css
          postfix: 
   spritesEnabled: true */

/**
 @componentGroup lists
 @cssObject zen-list
 @javaElement common.html.zen.HtmlList
 @lumen zencore:list
 
 There are several lists you can use to group related items. They can generally be applied to `<ul>` and `<ol>`.
 Some are bulleted, others are simple helpers meant to be extended to create stylized list types.
 
 Note that you can alter the vertical spacing for list items by adding one of the list spacing classes (described in the next section).
*/

/**
 @groupMember list
 @description Used for a basic vertical list.
 
 @extensibleExample
 <ul class="zen-list">
    <li>foo</li>
    <li>bar</li>
    <li>baz</li>
 </ul>
 
 @example
 <p>The basic list can contain other elements, such as the media block.</p>
 <ul class="zen-list zen-listMedium">
    <li>
        <div class="zen-media">
            <a class="zen-img zen-mrs" href="javascript:void(0);">
                <img alt="img" src="http://placehold.it/16x16">
            </a>
            <div class="zen-mediaBody"><a href="javascript:void(0);">text next to the icon</a></div>
        </div>
    </li>
    <li>
        <div class="zen-media">
            <a class="zen-img zen-mrs" href="javascript:void(0);">
                <img alt="img" src="http://placehold.it/16x16">
            </a>
            <div class="zen-mediaBody"><a href="javascript:void(0);">text next to the icon</a></div>
        </div>
    </li>
    <li>
        <div class="zen-media">
            <a class="zen-img zen-mrs" href="javascript:void(0);">
                <img alt="img" src="http://placehold.it/16x16">
            </a>
            <div class="zen-mediaBody"><a href="javascript:void(0);">text next to the icon</a></div>
        </div>
    </li>        
 </ul>
*/
.zen .zen-list {
    margin: 10px 0;
}

.zen .zen-list li {
    padding: .2em 0;
}

/**
 @groupMember inlineList
 
 An Inline List component is a plain, unstyled list of items, where each item is displayed as an inline element.
 An Inline List component component uses either the `<ol>` or `<ul>` tags, and does not have any bullets or numbering.
 
 @example 
 <ul class="zen-inlineList">
    <li>foo</li>
    <li>bar</li>
    <li>baz</li>
 </ul>
*/
.zen .zen-inlineList li {
    display: inline-block;
    padding-right: .5em;
    vertical-align: top;
}

/**
 @groupMember inlineListExt
 @description Similar to inlineList, however it adds bullets in between each list item.
 @example 
 <ul class="zen-inlineListExt">
    <li>foo</li>
    <li>bar</li>
    <li>baz</li>
 </ul>
*/
.zen .zen-inlineListExt li {
    display: inline;
}

.zen .zen-inlineListExt > li:after {
    content: "\2022";
    padding: 0;
    padding-right: 4px;
    padding-left: 6px;
}

.zen .zen-inlineListExt li:last-child:after {
    content: "";
}

/**
 @groupMember commentList
 
 A Comment List component is an unordered list of responses to a Chatter post, where each item 
 is displayed as a block-level element. The first item in a Comment List component has a visual indicator
 on its top side that indicates which post the comments relate to.
 
 @example
 <div class="zen-commentList">
  <b class="zen-arrowUp"></b>
  <ul>
    <li>Your post is awesome.</li>
    <li>Totally.</li>
    <li>&lt;3</li>
  </ul>
</div>
*/
.zen .zen-commentList ul {
    clear: both;
}

.zen .zen-commentList li {
    padding: 4px;
}

.zen .zen-commentList .zen-arrowUp {
    float: left;
    display: block;
    width: 0;
    height: 0;
    margin-left: 10px;
} 

/**
 @groupMember breadcrumbList

 A Breadcrumb List component is an unordered list of hierarchical navigation links, where each item is displayed as an inline element.
 They serve to show a user their current location in a navigational tree. For example, a user that is currently viewing the
 "All R&D" Chatter group would see a breadcrumb list of "Chatter | Groups | All R&D."
 
 @example
 <ul class="zen-breadcrumbList">
    <li><a href="javascript:void(0);">Chatter</a></li>
    <li><a href="javascript:void(0);">Groups</a></li>
    <li><a href="javascript:void(0);">All R&D</a></li>
 </ul>
*/
.zen .zen-breadcrumbList {
    padding: 2px 0 0;
    font-size: .917em;
    display: inline-block;
}

.zen .zen-breadcrumbList li {
    display:inline-block;
}

.zen .zen-breadcrumbList li:before {
    content: "\003E";
    display: inline-block;
    padding: 0;
    padding-right: 7px;
    padding-left: 4px;
}

.zen .zen-breadcrumbList li:first-child:before {
    content: "";
    padding: 0;
}

/**
 @groupMember checkList
 
 A Check List component is an unordered list of to-do items, where each item is displayed as a block-level element.
 For example, we encourage users to perform a series of tasks on Chatter pages, such as complete their Chatter profile,
 create a group, update their status, etc. As each item is completed, a different visual style applies to it.
 
 @example
 <ul class="zen-checkList">
    <li class="zen-done">Wake up</li>
    <li>Pick up laundry</li>
    <li>Go home</li>
 </ul>
*/
.zen .zen-checkList li {
    margin: 5px 0;
    padding-left: 2em;
}

/* TODO NM: document */
.zen .zen-subcheckList {
    padding-left: 3em;
}
.zen .zen-subcheckList li {
    list-style: disc outside none;
    background: none;
    padding-left: 0;
}

.zen .zen-subcheckList .zen-done {
    text-align: left;
}

/**
 @groupMember numberedList
 
 A Numbered List component is a simply-styled ordered list of items, where each item is displayed as a block-level element.

 @example
 <ol class="zen-numberedList">
    <li>Do this first</li>
    <li>Do this second</li>
    <li>Do this third</li>
 </ol>
*/
.zen .zen-numberedList {
    padding-left: 20px;
}

.zen .zen-numberedList li {
    list-style: decimal outside;
    margin: 3px 0;
}

/**
 @groupMember bulletedList
 
 A Bulleted List component is a simply-styled unordered list of items, where each item is displayed as a block-level element.
 Bullet List component items have round bullets displayed to their left.

 @example
 <ul class="zen-bulletedList">
    <li>Item 1</li>
    <li>Item 2</li>
    <li>Item 3</li>
 </ul>
*/
.zen .zen-bulletedList {
    padding-left: 20px;
}

.zen .zen-bulletedList li {
    list-style: disc outside;
    margin: 3px 0;
}

/**
 @groupMember ideaList
 
 An Idea List component is an unordered list of items, where each item is displayed as a block-level element.
 They have very large padding and margin declarations to make items feel "lighter" with more whitespace
 between them, such as a list of Ideas on the IdeaExchange.

 @example
 <ol class="zen-ideaList">
    <li>Make Salesforce free for everyone</li>
    <li>Charge $5,000,000 per user for everyone</li>
    <li>Please, more customization options for the User object</li>
 </ol>
*/
.zen .zen-ideaList ul {
    margin: 4px;
}

.zen .zen-ideaList li {
    padding: 15px;
    padding-left: 3px;
}

/**
 @groupMember pipedList
 
 A Piped List component is an unordered list of items, where each item is displayed as an inline element,
 and each item is separated by a horizontal line.

 @example
 <ul class="zen-pipedList">
    <li><a href="javascript:void(0);">A through F</a></li>
    <li><a href="javascript:void(0);">G through O</a></li>
    <li><a href="javascript:void(0);">P through Z</a></li>
 </ul>
*/
.zen .zen-pipedList li {
    box-sizing: border-box;
    display: inline-block;
    padding: 0 5px;
}

.zen .zen-pipedList:before,
.zen .zen-pipedList:after { /*clearfix */
    content: ""; 
    display: table;
}

.zen .zen-pipedList:after { /*clearfix */
    clear: both;
}

/* specialized piped list with media blocks inside - gross but necessary */
.zen .zen-pipedList .zen-img,
.zen .zen-pipedList .zen-imgExt {
    float: none;
}

/* we need a better way to figure out pipedList elements that contain media blocks.
   currently, the image of the media block is skewing the text baseline of any 
   items in the list that don't contain an image. until we figure that out, this
   is the least-ugly way i can think of to fix this on overview pages.
*/
/**
 @groupMember pipedList 
 @example
 <p>
    You can put media blocks in piped lists, however with a slightly altered structure. This is a very special
    use case, don't use the code for these modified blocks anywhere else.
 </p>
 <ul class="zen-pipedList">
    <li>
        <span class="zen-media zen-mediaExt">
            <a class="zen-img" href="javascript:void(0);"> <img alt="img" src="http://placehold.it/16x16"> </a>
            <span class="zen-mediaBody"> <a href="javascript:void(0);">text next to the icon</a> </span>
        </span>
    </li>
    <li>
        <span class="zen-media zen-mediaExt">
            <a class="zen-img" href="javascript:void(0);"> <img alt="img" src="http://placehold.it/16x16"> </a>
            <span class="zen-mediaBody"> <a href="javascript:void(0);">text next to the icon</a> </span>
        </span>
    </li>
    <li class="zen-lastItem">
        <span class="zen-media zen-mediaExt">
            <span class="zen-mediaBody">
                <a href="javascript:void(0);">text next to the icon</a>
                <a class="zen-imgExt" href="javascript:void(0);"><img alt="img" src="http://placehold.it/16x16"></a>
            </span>
        </span>
    </li>
 </ul>  
*/
.zen .zen-pipedList .zen-lastItem {
    position: relative;
    top: -1px;
}

/**
 @groupMember detailList

 A Detail List component is a very lightly-styled list of items, where each item is displayed as an inline element.
 Each item in a Detail List typically contains two pieces of text: a term (i.e., a label), and a definition (i.e., a value).
 
 For this reason Detail List components use the HTML5 description list tag (`<dl>`).

 @extensibleExample 
 <dl class="zen-detailList">
   <dt>Name:</dt><dd>Nathan McWilliams</dd>
   <dt>Language:</dt><dd>English</dd>
   <dt>Position:</dt><dd>Developer</dd>
 </dl>
*/
.zen .zen-detailList {
    overflow: auto; /*float containment*/
}

.zen .zen-detailList dt {
    padding-top: .3em;
    color: #4a4a56;
    font-weight: bold;
    font-size: .917em; /* 11px */
    width: 200px;
    float: left;
    clear: left;
    padding-right: 20px;
    text-align: right;
}

.zen .zen-detailList dd {
    padding-top: .3em;
}

/**
 @extension labelSmall
 @extends detailList
*/
.zen .zen-labelSmall dt {
     width: 65px;
}

/**
 @extension labelMedium
 @extends detailList
*/
.zen .zen-labelMedium dt {
    width: 120px;
}

/**
 @extension labelLarge
 @extends detailList
*/
.zen .zen-labelLarge dt {
    width: 280px;
}
    
/**
 @extension detailListExt
 @extends detailList  
 @description This extension adds an additional border between each item.
*/
.zen .zen-detailListExt dd {
    border-bottom:1px solid #ececec;
}

.zen .zen-detailListExt dd,
.zen .zen-detailListExt dt {    
	padding-top: 5px;
	padding-bottom: 5px;
}	

/**
 @componentGroup lists - spacing 
 @brief options for spacing out items in a list.
 @description You can apply different levels of vertical spacing to a list by using one of the list size classes.
 @instructions Add the appropriate class to your `ol` or `ul` element. You can add these classes to _any_ list component
 including "list", "numberedList", "bulletedList", "detailList" and more.
*/

/**
 @groupMember listSmall
 
 Set a small amount of vertical space on the items in a list.
 
 @example
 <ul class="zen-list zen-listSmall">
    <li>List Item 1</li>
    <li>List Item 2</li>
    <li>List Item 3</li>
 <ul>
*/
.zen .zen-listSmall li {
    margin: 5px 0;
}

.zen .zen-listSmall dt,
.zen .zen-listSmall dd {
	padding-top: 5px;
	padding-bottom: 5px;
}

/**
 @groupMember listMedium
 
 Set a medium amount of vertical space on the items in a list.
 
 @example
 <ul class="zen-list zen-listMedium">
    <li>List Item 1</li>
    <li>List Item 2</li>
    <li>List Item 3</li>
 <ul>
*/
.zen .zen-listMedium li {
    margin: 10px 0;
}

.zen .zen-listMedium dt,
.zen .zen-listMedium dd {
	padding-top: 10px;
	padding-bottom: 10px;
} 

/**
 @groupMember listLarge
 
 Set a large amount of vertical space on the items in a list.
 
 @example
 <ul class="zen-list zen-listLarge">
    <li>List Item 1</li>
    <li>List Item 2</li>
    <li>List Item 3</li>
 <ul>
*/
.zen .zen-listLarge li {
    margin: 20px 0;
}

.zen .zen-listLarge dt,
.zen .zen-listLarge dd {
	padding-top: 20px;
	padding-bottom: 20px;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/list/themes/aloha/list.css
          postfix: 
   spritesEnabled: true */

/* ----- comments list ----- */
.zen .zen-commentList > ul {
    border-top: 1px solid #dee5ea;
}

.zen .zen-commentList > ul > li {
    border-top: 1px solid #FFF;
    border-bottom: 1px solid #dee5ea;
    background-color: #eff7fa;
    padding: 5px;
    margin: 0;
}

.zen .zen-commentList .zen-arrowUp {
	padding-top: 5px;
    border-style: solid;
    border-width: 0 5px 5px 5px;
    border-color: transparent transparent #dee5ea;
}

.zen .zen-breadcrumbList a {
    color: #797979;
}

.zen .zen-checkList li {
    background: url(/img/oocss/dot.png) no-repeat;
}

.zen .zen-checkList .zen-done {
    background-image: url(/img/chatter/wtdn_checked.png);
}

.zen .zen-subcheckList {
    color: #7d7d84;
}

.zen .zen-subcheckList .zen-done {
    text-decoration: line-through;
    background: none; /*only works if the background:none part is in here */
}

.zen .zen-subcheckList .zen-done a {
    color: #7d7d84;
}

.zen .zen-ideaList li {
    border-bottom: 1px solid #e9eaea;
}

.zen .zen-ideaList li:last-child {
    border-bottom: 0;
}

/* ----- piped divider list ----- */
.zen .zen-pipedList li {
    border-left: 1px solid #7d7d84;
}

.zen .zen-pipedList li:first-child,
.zen .zen-pipedList .zen-firstItem {
    border-left: 0;
}

/* hover list */
 .zen .zen-hoverList li:hover, 
.zen .zen-hoverList li:focus {
    background-color: #e3f3ff;
}

.zen .zen-hoverList a,
.zen .zen-hoverList a:link {
    color: #000;
    text-decoration: none; 
}

.zen .zen-hoverList a:hover {
    color: #015ba7;
}

.zen .zen-chatterList {
	margin-top: 12px;
	margin-bottom: 12px;
}

.zen .zen-chatterList li {
	padding: 4px;
}

.zen .zen-chatterList .zen-chatterActive {
	background-color: #c4e7f2;
	-moz-border-top-left-radius: 5px;
    -moz-border-bottom-left-radius: 5px;
    border-top-left-radius: 5px;
    border-bottom-left-radius: 5px;
}

.zen .zen-chatterFeedList > li {
	border-bottom: 1px solid #e9eaea;
	padding-bottom: 9px;
	padding-top: 9px;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/divider/divider.css
          postfix: 
   spritesEnabled: true */

/**
 @componentGroup dividers
 @brief Visual separators
 @cssObject zen-divider
 
 A Divider component is a horizontal rule (i.e., an `<hr>` tag) that visually separates elements on a page,
 such as groups of menu items or list blocks.
*/
.zen hr {
	height: 0;
	border: 0;
	margin: 5px 0;
}

/**
 @groupMember divider
 @example <hr class="zen-divider" /> 
*/
.zen .zen-divider {
	border-top: 1px dotted #d9d9d9;
}

/**
 @groupMember dividerStrong
 @example <hr class="zen-dividerStrong" />
*/
.zen .zen-dividerStrong {
	border-top: 2px solid #000;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/table/table.css
          postfix: 
   spritesEnabled: true */

/**
 @component table
 @brief for displaying tabular data
 @cssObject zen-table

 @description 
 A Table component is used to display one or more rows of data.
 
 Although historically used for positioning and layout of elements on a page
 (due to limitations of CSS and/or browser incompatibility), a Table component should now
 only be used for displaying tabular information. 
 
 @instructions
 Tables typically contain a header row, with each cell indicating the type of data being displayed in their
 respective columns. Some of the HTML tags that compose a table - `<table>`, `<tr>`, `<td>`, and `<th>`
 - can have various alignment options applied:
 
 - `zen-textTop` vertically aligns contents to the top of the cell(s)
 - `zen-textMiddle` vertically aligns contents to the middle of the cell(s)
 - `zen-textBottom` vertically aligns contents to the bottom of the cell(s)
 - `zen-textLeft` horizontally aligns contents to the left of the cell(s)
 - `zen-textCenter` horizontally aligns contents to the center of the cell(s)
 - `zen-textRight` horizontally aligns contents to the right of the cell(s)
 
 An alignment class on a cell takes precedence over table row and table. Table row takes precedence over table.

 @extensibleExample
 <div class="zen-data">
    <table>
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Title</th>
                <th scope="col">Phone</th>
            </tr>
        </thead>
        <tfoot>
            <tr>
                <td>Footer 1</td>
                <td>Footer 2</td>
                <td>Footer 3</td>
            </tr>
        </tfoot>
        <tbody>
            <tr>
                <td>Jon Amos</td>
                <td>Sales Manager</td>
                <td>(905) 555-1212</td>
            </tr>
            <tr>
                <td>Carole White</td>
                <td>VP Sales</td>
                <td>(212) 555-5555</td>
            </tr>
            <tr>
                <td>Leanne Tomlin</td>
                <td>VP Customer Support</td>
                <td>(415) 901-7000</td>
            </tr>
        </tbody>
    </table>
 </div>
 
 
 
 @example
 <div class="zen-data">
    <table class="zen-textMiddle">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col" class="zen-textCenter">Phone</th>
                <th scope="col" style="width:50%">Bio</th>
            </tr>
        </thead>
        <tfoot>
            <tr class="zen-textCenter">
                <td class="zen-textLeft">Footer 1</td>
                <td>Footer 2</td>
                <td class="zen-textRight">Footer 3</td>
            </tr>
        </tfoot>        
        <tbody>
            <tr>
                <td>Jon Amos</td>
                <td class="zen-textCenter">(905) 555-1212</td>
                <td>
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                    Cras facilisis est hendrerit quam egestas at adipiscing sem tincidunt. 
                </td>
            </tr>
            <tr>
                <td>Carole White</td>
                <td class="zen-textCenter">(212) 555-5555</td>
                <td>
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                    Cras facilisis est hendrerit quam egestas at adipiscing sem tincidunt. 
                </td>                
            </tr>
            <tr>
                <td>Leanne Tomlin</td>
                <td class="zen-textCenter">(415) 901-7000</td>
                <td>
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                    Cras facilisis est hendrerit quam egestas at adipiscing sem tincidunt. 
                </td>                
            </tr>
        </tbody>
    </table>
 </div>
*/
.zen .zen-data {
	position:relative;
	zoom:1;
	text-align:left;    
}

.zen .zen-data table {
	width:100%;
}

.zen .zen-data tr {
	vertical-align:top;
}

/* horizontal alignment */
.zen .zen-textCenter,
.zen table .zen-textCenter,
.zen table tr .zen-textCenter {
	text-align:center;
}

.zen .zen-textLeft,
.zen table .zen-textLeft,
.zen table tr .zen-textLeft {
	text-align:left;
}

.zen .zen-textRight,
.zen table .zen-textRight,
.zen table tr .zen-textRight {
	text-align:right;
}

/* vertical alignment */
.zen .zen-textTop,
.zen table .zen-textTop,
.zen table tr .zen-textTop {
	vertical-align:top;
}

.zen .zen-textBottom,
.zen table .zen-textBottom,
.zen table tr .zen-textBottom {
	vertical-align:bottom;
}

.zen .zen-textMiddle,
.zen table .zen-textMiddle,
.zen table tr .zen-textMiddle {
	vertical-align:middle;
}

.zen .zen-data th,
.zen .zen-data td {
	padding:4px 7px;
}

.zen .zen-data thead th,
.zen .zen-data thead td {
	white-space:nowrap;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/table/themes/aloha/table.css
          postfix: 
   spritesEnabled: true */

/**
 @extension columnSort
 @extends table
 
 @description
 A colSort table applies styles for sortable columns, although it can be used for regular non-sortable tables too.

 @instructions
 To use, apply the `zen-columnSort` class to the `zen-data` div.
 
 When applying the sort behavior to the table in JS, the title should be updated when the state changes.
 Keep the title simple, just the most specific applicable state. e.g. if it is sortable
 and currently sorted in ascending order, the title should just be ascending.
 
 @example
 <div class="zen-data zen-columnSort">
    <table>
        <thead>
            <tr>
                <th scope="col" title="sortable" class="zen-sortable">Name</th>
                <th scope="col" title="descending" class="zen-sortable zen-sorted zen-descending">Title</th>
                <th scope="col">Phone</th>
            </tr>
        </thead>
        <tfoot>
            <tr>
                <td>Footer 1</td>
                <td>Footer 2</td>
                <td>Footer 3</td>
            </tr>
        </tfoot>
        <tbody>
            <tr>
                <td>Jon Amos</td>
                <td>Sales Manager</td>
                <td>(905) 555-1212</td>
            </tr>
            <tr>
                <td>Carole White</td>
                <td>VP Sales</td>
                <td>(212) 555-5555</td>
            </tr>
            <tr>
                <td>Leanne Tomlin</td>
                <td>VP Customer Support</td>
                <td>(415) 901-7000</td>
            </tr>
            <tr>
                <td>Geoff Minor</td>
                <td>Executive Officer</td>
                <td>(212) 555-5555</td>
            </tr>
        </tbody>
    </table>
 </div>
*/
.zen .zen-columnSort th,
.zen .zen-columnSort td {
	border: 1px solid #c9dce2;
	border-top-width: 0;
	border-left-width: 0;
}

.zen .zen-columnSort table {
	background-color: #fff;
	border: 1px solid #c9dce2;
	border-right-width: 0;
	border-bottom-width: 0;
	border-top: 3px solid #1797c0; /* TODO: move this out of here - probably just add "brdThemed" to the table instead */
	-moz-border-radius: 4px;
	border-radius: 4px;
	border-collapse: separate;
}

.zen .zen-themed .zen-inner .zen-columnSort table {
	border-top: 1px solid #c9dce2; /* for data tables already inside a themed box, don't add a 3px border to the top */
}

.zen .zen-columnSort thead tr {
	background: #f6fdff;
	background: -moz-linear-gradient(top,#f6fdff 0%,#d1eff8 100%);
	background: -webkit-linear-gradient(top,#f6fdff 0%,#d1eff8 100%);
	background: -ms-linear-gradient(top,#f6fdff 0%,#d1eff8 100%);
}

/* sort state */
.zen .zen-columnSort th.zen-sortable:hover {
	background: #fff;
	background: -moz-linear-gradient(top,#fff 0%,#e4f8ff 100%);
	background: -webkit-linear-gradient(top,#fff 0%,#e4f8ff 100%);
	background: -ms-linear-gradient(top,#fff 0%,#e4f8ff 100%);
	color: #015ba7;
}

.zen .zen-columnSort .zen-sorted {
	background-color: #bbe3ef;
}

.zen .zen-columnSort .zen-sorted:after {
	background-color: #d5f1f9;
	-moz-border-radius: 7px;
	border-radius: 7px;
	padding: 1px 4px 2px;
	display: inline-block;
	margin-left: 5px;
}

.zen .zen-columnSort .zen-ascending:after {
	content: "\2191";
}

.zen .zen-columnSort .zen-descending:after {
	content: "\2193";
	color: #222;
}

/* selected state */
.zen .zen-columnSort thead .zen-selected {
	display: block;
	border: 1px solid #55C8ed;
	-moz-border-radius: 3px;
	border-radius: 3px;
	background-color: #b2e9fa;
	color: #015ba7;
	margin: 1px;
	margin-right: 0;
}

/* footer */
.zen .zen-columnSort tfoot tr {
	background: #fefefe;
	background: -moz-linear-gradient(top,#fefefe 0%,#f6f5f5 100%);
	background: -webkit-linear-gradient(top,#fefefe 0%,#f6f5f5 100%);
	background: -ms-linear-gradient(top,#fefefe 0%,#f6f5f5 100%);
}

.zen .zen-columnSort tfoot td {
	border-right: 0;
}

.zen .zen-columnSort tfoot td:last-child {
	border-right: 1px solid #c9dce2;
}

.zen .zen-columnSort table :first-child tr:first-child th:first-child,
.zen .zen-columnSort table :first-child tr:first-child td:first-child {
	-moz-border-radius-topleft: 4px;	/* FF 3.6 */
	border-top-left-radius: 4px;
}

.zen .zen-columnSort table :first-child tr:first-child th:last-child,
.zen .zen-columnSort table :first-child tr:first-child td:last-child {
	-moz-border-radius-topright: 4px;		/* FF 3.6 */
	border-top-right-radius: 4px;
}

.zen .zen-columnSort table :last-child tr:last-child th:first-child,
.zen .zen-columnSort table :last-child tr:last-child td:first-child {
	-moz-border-radius-bottomleft: 4px;	/* FF 3.6 */
	border-bottom-left-radius: 4px;
}

.zen .zen-columnSort table :last-child tr:last-child th:last-child,
.zen .zen-columnSort table :last-child tr:last-child td:last-child {
	-moz-border-radius-bottomright: 4px;	/* FF 3.6 */
	border-bottom-right-radius: 4px;
}

/**
 @extension detailTable
 @extends table
 @description TODO add description
 @instructions To use, add the `zen-detailTable` class to the table (*not* the `zen-data` div).
 
 @extensibleExample
 <div class="zen-data">
    <table class="zen-detailTable">
        <tbody>
            <tr>
                <th class="zen-label zen-cropEllipsis" scope="row">Opportunity Name</th>
                <td class="zen-cropEllipsis">Acme - 1,200 Widgets</td>
            </tr>
            <tr>
                <th class="zen-label zen-cropEllipsis" scope="row">Account Name</th>
                <td class="zen-cropEllipsis"><a href="javascript:void(0);">Acme</a></td>
            </tr>
            <tr>
                <th class="zen-label zen-cropEllipsis" scope="row">Close Date</th>
                <td class="zen-cropEllipsis">7/7/2008</td>
            </tr>
            <tr>
                <th class="zen-label zen-cropEllipsis" scope="row">Stage</th>
                <td class="zen-cropEllipsis">Prospecting</td>
            </tr>
            <tr class="zen-lastRow">
                <th class="zen-label zen-cropEllipsis" scope="row">Probability (%)</th>
                <td class="zen-cropEllipsis">10%</td>
            </tr>
        </tbody>
    </table>
 </div>
*/
.zen .zen-detailTable th {
	text-align: right;
	font-weight: bold;
	width: 33%;
	padding: 5px 10px 5px 2px;
}

.zen .zen-detailTable td {
	padding: 5px 2px 5px 10px;
}

.zen .zen-detailTable tr {
	border-bottom: 1px solid #ececec;
}

.zen .zen-detailTable tr:last-child {
	border-bottom: 0;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/button/buttons.css
          postfix: 
   spritesEnabled: true */

/**
 @componentGroup buttons
 @brief buttons in all their clicky glory
 @cssObject zen-buttons
 
 @description
 A Button component is a type of HTML form element that, when clicked, performs some sort of task,
 typically some type of action related to the content currently displayed on the page (e.g., "Save", "Delete", "Cancel", etc.)
 
 Buttons should not be used for the purpose of only navigating between pages (@see Link element.) 
 
 @instructions
 In cases where it's not really part of a form, you can use a link instead. See below for examples of this.
 
 @groupMember btn 
 @example <button class="zen-btn" title="Default Button">Default Button</button>
 @example <a class="zen-btn" href="javascript:void(0);" title="Default Link">Default Link</a>
 
 @groupMember primaryBtn
 @example <button class="zen-btn zen-primaryBtn" title="Primary Button">Primary Button</button>
 @example <a class="zen-btn zen-primaryBtn" href="javascript:void(0);" title="Primary Link">Primary Link</a>
 
 @groupMember promoBtn
 @example <button class="zen-btn zen-promoBtn" title="Share">Share</button>
 @example <a class="zen-btn zen-promoBtn" href="javascript:void(0);" title="Share">Share</a>
 
 @groupMember closeBtn
 @example <a class="zen-closeBtn" title="Close" href="javascript:void(0);">X<span class="zen-assistiveText"> - Click to Close</span></a>
 
 @groupMember disabledBtn
 @description You can disable buttons by adding the `zen-disabledBtn`, `zen-disabledPromoBtn`, or `zen-closeDisabled` class.
 @example <button class="zen-btn zen-disabledBtn" title="Default Button (Disabled)" disabled="disabled">Disabled Default Button</button>
 @example <button class="zen-btn zen-primaryBtn zen-disabledBtn" title="Primary Button (Disabled)" disabled="disabled">Disabled Primary Button</button>
 @example <button class="zen-btn zen-promoBtn zen-disabledPromoBtn" title="Share (Disabled)" disabled="disabled">Share</button>
 @example
 <a class="zen-closeBtn zen-closeDisabled" title="Close (Disabled)" href="javascript:void(0);" tabindex="-1">
    X<span class="zen-assistiveText"> - Click to Close (Disabled)</span>
 </a>
*/

/* TODO: EW - I haven't verified this just yet, but I'm pretty sure we can clean the button stuff up a *lot* */
.zen .zen-btn {
	overflow: visible; /* make IE respect padding declarations */
	cursor: pointer;
	display: inline-block;
	position: relative;
	padding: 2px 3px;
	margin: 1px;
}

.zen .zen-btn:active {
	bottom: -1px;
}

.zen .zen-disabledBtn,
 .zen .zen-disabledBtn:hover, 
.zen .zen-disabledBtn:focus,
.zen .zen-disabledBtn:active,
.zen .zen-disabledBtn:visited,
.zen .zen-disabledPromoBtn,
 .zen .zen-disabledPromoBtn:hover, 
.zen .zen-disabledPromoBtn:active,
.zen .zen-disabledPromoBtn:focus {
    bottom: 0;
}

.zen .zen-closeBtn {
	height: 16px;
	line-height: 16px;
	width: 16px;
	display: block;
	text-align: center;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/button/buttons.css
          postfix: wk
   spritesEnabled: true */

.zen .zen-btn {
	padding: 3px 6px;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/button/themes/aloha/buttons.css
          postfix: 
   spritesEnabled: true */

.zen .zen-btn {
	border: 1px solid #c3c3c3;
	border-color: #c3c3c3 #aaa #909090;
	-moz-border-radius: 3px;
	border-radius: 3px;
	background-color: #f0f0f0;
	background-image: -moz-linear-gradient(#fff,#f0f0f0);
	background-image: -webkit-linear-gradient(#fff,#f0f0f0);
	background-image: -ms-linear-gradient(#fff,#f0f0f0);
	font-size: .917em;
	font-weight: bold;
}

.zen a.zen-btn {
    color: #222;
}

 .zen .zen-btn:hover, 
.zen .zen-btn:focus,
.zen .zen-btn:active {
    text-decoration: none;
}

.zen .zen-btn:hover {
    background: #e4f5ff;
    background: -moz-linear-gradient(#fff,#e4f5ff 60%);
    background: -webkit-linear-gradient(#fff,#e4f5ff 60%);
    background: -ms-linear-gradient(#fff,#e4f5ff 60%);
}

.zen .zen-btn:active,
.zen .zen-btn:focus {
	border-color: #6a6a6a #888 #a5a5a5;
	background-color: #cbcbcb;
	background: -moz-linear-gradient(#cbcbcb,#e5e5e5 10%,#f8f8f8);
	background: -webkit-linear-gradient(#cbcbcb,#e5e5e5 10%,#f8f8f8);
	background: -ms-linear-gradient(#cbcbcb,#e5e5e5 10%,#f8f8f8);
}

.zen button:disabled { /* separated from the rule below on purpose */
	cursor: default;
}

.zen .zen-disabledBtn,
.zen .zen-closeDisabled,
.zen .zen-disabledPromoBtn { /* ie8 won't pick up this rule if there's any selector it doesn't recognize (e.g.,button:disabled) */
	cursor: default;
}

.zen .zen-primaryBtn {
	background: #eaf9ff;
	background: -moz-linear-gradient(top,#eaf9ff 0%,#ccedfb 68%,#bee9f8 100%);
	background: -webkit-linear-gradient(top,#eaf9ff 0%,#ccedfb 68%,#bee9f8 100%);
	background: -ms-linear-gradient(top,#eaf9ff 0%,#ccedfb 68%,#bee9f8 100%);
}

 .zen .zen-primaryBtn:hover, 
.zen .zen-primaryBtn:focus {
    background: #d3f2fd;
    background: -moz-linear-gradient(top,#f9fdff 0%,#d3f2fd 100%);
    background: -webkit-linear-gradient(top,#f9fdff 0%,#d3f2fd 100%);
    background: -ms-linear-gradient(top,#f9fdff 0%,#d3f2fd 100%);
}

.zen .zen-primaryBtn:active {
	background-color: #bee7f6;
	background-image: none;
}

.zen .zen-disabledBtn,
 .zen .zen-disabledBtn:hover, 
.zen .zen-disabledBtn:focus,
.zen .zen-disabledBtn:active,
.zen .disabledBtn:visited {
	background-color: #fafafa;
	border-color: #e2e2e2;
	background-image: none;
	color: #c2c2c2;
	-moz-box-shadow: none;
	-webkit-box-shadow: none;
	box-shadow: none;
}

.zen .zen-promoBtn,
 .zen .zen-promoBtn:hover, 
.zen .zen-promoBtn:focus,
.zen .zen-promoBtn:active {
    -moz-border-radius: 7px;
    border-radius: 7px;
    -moz-box-shadow: 0 1px 3px 1px rgba(0,0,0,.15);
    -webkit-box-shadow: 0 1px 3px 1px rgba(0,0,0,.15);
    box-shadow: 0 1px 3px 1px rgba(0,0,0,.15);
    padding: 5px 7px;
    font-weight: bold;
    font-size: 1em;
    border: 2px solid #fff;
    color: #fff;
    background-image: -moz-linear-gradient(#6bc7e4,#0599cc 65%);
    background-image: -webkit-linear-gradient(#6bc7e4,#0599cc 65%);
    background-image: -ms-linear-gradient(#6bc7e4,#0599cc 65%);
}

.zen a.zen-promoBtn,
.zen a.zen-promoBtn:hover,
.zen a.zen-promoBtn:focus,
.zen a.zen-promoBtn:active {
	color: #fff;
	padding: 5px 7px;
	text-decoration: none;
}

 .zen .zen-promoBtn:hover, 
.zen .zen-promoBtn:focus,
.zen .zen-promoBtn:active {
    background: #1b99c3;
}

.zen .zen-disabledPromoBtn,
 .zen .zen-disabledPromoBtn:hover, 
.zen .zen-disabledPromoBtn:active,
.zen .zen-disabledPromoBtn:focus {
    background-image: none;
    background-color: #e9eE8e8;
}

.zen .zen-closeBtn {
	border: 1px solid #fff;
	-moz-border-radius: 4px;
	border-radius: 4px;
	-moz-box-shadow: inset 0 1px 0 0 #e4e4e4;
	-webkit-box-shadow: inset 0 1px 0 0 #e4e4e4;
	box-shadow: inset 0 1px 0 0 #e4e4e4;
	background-color: #f6f7f7;
	color: #707474;
	font-weight: bold;
	font-family: Verdana,Arial,Helvetica,sans-serif;
	padding: 0;
}

.zen .zen-closeBtn:hover {
	background-color: #e3f3ff;
	-moz-box-shadow: inset 0 1px 0 0 #d2D2D2;
	-webkit-box-shadow: inset 0 1px 0 0 #d2D2D2;
	box-shadow: inset 0 1px 0 0 #d2D2D2;
	color: #015ba7;
	text-decoration: none;
}

.zen .zen-closeBtn:active {
	background-color: #dadfdf;
	-moz-box-shadow: inset 0 1px 0 0 #c7c7c7;
	-webkit-box-shadow: inset 0 1px 0 0 #c7c7c7;
	box-shadow: inset 0 1px 0 0 #c7c7c7;
}

.zen .zen-closeBtn:visited {
	text-decoration: none;
}

 .zen .zen-closeDisabled:hover, 
.zen .zen-closeDisabled {
    background-color: #f0f1F1;
    color: #bcbcbc;
    text-decoration: none;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/button/themes/aloha/buttons.css
          postfix: wk
   spritesEnabled: true */

.zen .zen-promoBtn,
.zen .zen-promoBtn:hover,
.zen .zen-promoBtn:focus,
.zen .zen-promoBtn:active {
	padding: 5px 14px;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/tooltip/tooltip.css
          postfix: 
   spritesEnabled: true */

/* ----- tooltips ----- */
.zen .zen-tooltip {
	position: relative;
}

.zen .zen-tooltipBox {
	display: inline-block;
	position: relative;
}

.zen .zen-tooltip .zen-tooltipBox {
	display: none;
	position: absolute;
}

.zen .zen-tooltip:focus .zen-tooltipBox {
    display: inline-block;
    padding: 6px;
    width: 200px;
}

.zen .zen-tooltip:hover .zen-tooltipBox {
    display: inline-block;
    padding: 6px;
    width: 200px;
}

.zen .zen-tooltip .zen-tooltipBox.zen-tooltipTop {
	bottom: 1.4em;
	left: 0;
}

.zen .zen-tooltip .zen-tooltipBox.tooltipBottom {
	top: 1.4em;
	left: 0;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/popup/popup.css
          postfix: 
   spritesEnabled: true */

.zen.zen-popup {
	background: 0;
}

.zen body.zen-popupBody { /* won't work in IE without a class on the body */
	overflow:hidden;
}

.zen .zen-popupOverlay {
	position:fixed;
	top:0;
	left:0;
	z-index:100;
	width:100%;
	height:100%;
	background-color:hsla(0,0%,0%,.75);
}

.zen .zen-centerPopup {
	position:absolute;
	top:40%;
	left:35%;
	width:400px;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/crop/crop.css
          postfix: 
   spritesEnabled: true */

/**
 @componentGroup cropped content
 @brief Crop content vertically or horizontally
 @cssObject zen-crop
 @javaElement common.html.zen.Cropped
 
 These classes allow you to crop content horizontally, vertically, or both.
 Apply the classes to a container that has a specified width.
 There is also an option to crop with an ellipsis. 
*/

/**
 @groupMember cropMe
 @description Crop content both vertically and horizontally.
 
 @example
 <p>This image is originally 300x300, but has been cropped both vertically and horizontally.</p>
 <div class="zen-cropMe" style="width:200px;height:150px">
    <img src="http://lorempixel.com/300/300/abstract" width="300" height="300" alt="placeholder image"/>
 </div>
*/

/**
 @groupMember cropH
 @description Crop content horizontally.
 
 @example
 <p>This image is originally 300x300, but has been cropped horizontally.</p>
 <div class="zen-cropH" style="width:200px;height:150px">
    <img src="http://lorempixel.com/300/300/abstract" width="300" height="300" alt="placeholder image"/>
 </div>
*/
.zen .zen-cropMe,
.zen .zen-cropH {
	overflow-x: hidden !important;
}

/**
 @groupMember cropV
 @description Crop content vertically.
 
 @example
 <p>This image is originally 300x300, but has been cropped vertically.</p>
 <div class="zen-cropV" style="width:200px;height:150px">
    <img src="http://lorempixel.com/300/300/abstract" width="300" height="300" alt="placeholder image"/>
 </div>
*/
.zen .zen-cropMe,
.zen .zen-cropV {
	overflow-y: hidden !important;
}

/**
 @groupMember cropEllipsis
 @description Crop textual content with an ellipsis.
 
 @example
 <p class="zen-cropEllipsis" style="width:250px">ThisContentWillBeCroppedBecauseItIsOneLongString<p>
*/
.zen .zen-cropEllipsis {
	overflow: hidden;
	text-overflow: ellipsis;
	-moz-binding: url(/sync/ellipsis.xml#ellipsis);
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/accessibility/accessibility.css
          postfix: 
   spritesEnabled: true */

/**
 @componentGroup accessibility
 @brief Create semantic markup for use with screen readers 
 @cssObject zen-accessibility
 
 A collection of classes to augment creating accessible markup for screen readers, without
 imposing on sighted users.
*/

/**
 @groupMember assistiveText
 @javaElement common.html.zen.AssistiveText
 
 A snippet of text that is not visible to users, but can be seen by screen readers,
 or users with CSS disabled in their browser. It is usually an `<h1>`, `<h2>`, `<h3>`,
 or `<span>` tag that is positioned far outside the visible browser viewport.
 
 Assistive Text objects generally communicate the current visual state of an element,
 or serve as navigation markers on the page. In the case of conveying an element's state,
 parentheses are often used to aid in readability if a user has CSS disabled in their browser.
 
 @example 
 <div>
    <h1 class="zen-assistiveText">Sidebar Components</h1>
    <p>In this example, the h1 with class "zen-assistiveText" above is not visible on the screen but available to screen readers.</p>
 </div>
 
 @example
 <ul>
    <li>
        Accounts Tab <span class="zen-assistiveText">(Currently Selected)</span>
    </li>
 </ul>
 
 The following solution is as per recommendations at http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
*/
.zen .zen-assistiveText {
  position: absolute !important;
  height: 1px;
  width: 1px; 
  overflow: hidden;
  clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
}

/**
 @groupMember assistiveLink
 @javaElement common.html.zen.AssistiveLink
 
 An Assistive Link component is a style-neutral `<a>` tag that serves only to wrap an HTML element so that it can
 receive tab focus. Some elements do not normally receive focus when tabbing through a Web page, such as
 `<div>`, `<span>`, and `<b>` tags. However, when an Assistive Link wraps these elements, they now become
 tab-focusable and become interactive for keyboard-only users (e.g., a `<b>` tag -- @see PresentationElement.java --
 that is used as a clickable drop-down arrow for highly styled menu buttons).
 
 @example
 <div>
    <p>
        The a tag with with a class of "zen-assistiveLink" in this example enables it's encompassing element to become tabable.
        <a class="zen-assistiveLink"><b class="zen-selectArrow"></b></a>        
    </p>
 </div>
*/
.zen .zen-assistiveLink {
    padding:0 !important;
    margin:0 !important;
    height:1px !important; /* webkit won't focus the link if it isn't at least 1x1 */
    width:1px !important; /* webkit won't focus the link if it isn't at least 1x1 */
    line-height:0 !important;
    background-color:transparent !important;
    overflow:visible !important;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/icons/icons.css
          postfix: 
   spritesEnabled: true */

/*
    These icons are temporarily using the ones from common.css, however visual design has a new set of icons that will end up
    replacing most of these.
*/

.helpIcon { background-image: url(/img/sprites/master.png);
	background-position: 0px -142px;width:16px;
	height:16px; } /** used for help icon in top right of page **/
.recycleIcon { background-image: url(/img/func_icons/util/recycle.gif);
	background-position: 0px 0px;width:19px;
	height:19px;} /** used for recycle bin in sidebar */
.datePickerIcon { background-image: url(/img/func_icons/util/datePicker16.gif);
	background-position: 0px 0px;width:16px;
	height:16px; } /**used for calendar shortcut */
.escalatedLarge { background-image: url(/img/func_icons/util/escalation16.gif);
	background-position: 0px 0px;width:16px;
	height:16px; }
.printerIcon { background-image: url(/img/func_icons/util/print20.gif);
	background-position: 0px 0px;width:20px;
	height:20px; }
.alertIcon { background-image: url(/img/func_icons/util/alert16.gif);
	background-position: 0px 0px;width:16px;
	height:16px; }
.checkmarkIcon { background-image: url(/img/func_icons/util/checkmark16.gif);
	background-position: 0px 0px;width:16px;
	height:16px; }
.groupEventIcon { background-image: url(/img/group_event.gif);
	background-position: 0px 0px;width:16px;
	height:16px; }
.doubleArrowUp { background-image: url(/img/double_arrow_up.gif);
	background-position: 0px 0px;width:24px;
	height:20px; }
.doubleArrowDwn { background-image: url(/img/double_arrow_dwn.gif);
	background-position: 0px 0px;width:24px;
	height:20px; }
.colorPickerIcon { background-image: url(/img/func_icons/util/colorPicker16.gif);
	background-position: 0px 0px;width:16px;
	height:16px; }
.downArrowIcon { background-image: url(/img/arrow_dwn.gif);
	background-position: 0px 0px;width:24px;
	height:20px; }
.leftArrowIcon { background-image: url(/img/arrow_lt.gif);
	background-position: 0px 0px;width:24px;
	height:20px; }
.rightArrowIcon { background-image: url(/img/arrow_rt.gif);
	background-position: 0px 0px;width:24px;
	height:20px; }
.upArrowIcon{ background-image: url(/img/arrow_up.gif);
	background-position: 0px 0px;width:24px;
	height:20px; }
.unresolvedIcon { background-image: url(/img/icon/unresolved16.png);
	background-position: 0px 0px;width:16px;
	height:16px; }
.escalatedLarge { background-image: url(/img/func_icons/util/escalation16.gif);
	background-position: 0px 0px;width:16px;
	height:16px; }
.escalatedSmall { background-image: url(/img/func_icons/util/escalation12.gif);
	background-position: 0px 0px;width:12px;
	height:12px; }
.infoIcon { background-image: url(/img/sprites/master.png);
	background-position: 0px -162px;width:16px;
	height:16px; }
.mailCloseIcon { background-image: url(/img/func_icons/util/mailCloseEnv16.gif);
	background-position: 0px 0px;width:16px;
	height:16px; }
.mailOpenIcon { background-image: url(/img/func_icons/util/mailOpenEnv16.gif);
	background-position: 0px 0px;width:16px;
	height:16px; }
.mailFrontIcon { background-image: url(/img/func_icons/util/mailFrontEnv16.gif);
	background-position: 0px 0px;width:16px;
	height:16px; }
.editLayoutIcon { background-image: url(/img/func_icons/util/editLayout20.gif);
	background-position: 0px 0px;width:20px;
	height:20px; }
.alertIcon { background-image: url(/img/func_icons/util/alert16.gif);
	background-position: 0px 0px;width:16px;
	height:16px; }
.checkmarkIcon { background-image: url(/img/func_icons/util/checkmark16.gif);
	background-position: 0px 0px;width:16px;
	height:16px; }

.printerIconOn { background-image: url(/img/func_icons/util/print20.gif);
	background-position: 0px 0px;width:20px;
	height:20px;
    background-position: 0 -20px;
}
.printerIconDisabled { background-image: url(/img/func_icons/util/print20.gif);
	background-position: 0px 0px;width:20px;
	height:20px;
    background-position: 0 -40px;
}
.removeIcon { background-image: url(/img/func_icons/remove12.gif);
	background-position: 0px 0px;width:12px;
	height:12px;
    background-position: top left;
}
.removeIconOn { background-image: url(/img/func_icons/remove12_on.gif);
	background-position: 0px 0px;width:12px;
	height:12px;
    background-position: top right;
}
.dialogCloseIcon { background-image: url(/img/func_icons/util/dialogClose16.gif);
	background-position: 0px 0px;width:16px;
	height:16px;
    background-position: top left;
}
.dialogCloseIconOn { 
    background-position: top right;
}
.lookupIcon { background-image: url(/img/func_icons/util/lookup20.gif);
	background-position: 0px 0px;width:20px;
	height:20px;
    background-position: top left;
}
.lookupIconOn { background-image: url(/img/func_icons/util/lookup20.gif);
	background-position: 0px 0px;width:20px;
	height:20px;
    background-position: top right;
}
.closeIcon { background-image: url(/img/func_icons/closeSprite16.gif);
	background-position: 0px 0px;width:16px;
	height:16px;
    cursor: pointer;
    background-position: top left;
}
.closeIconOn { background-image: url(/img/func_icons/closeSprite16.gif);
	background-position: 0px 0px;width:16px;
	height:16px;
    cursor: pointer;
    background-position: 0px -16px;
}
.closeNone {
    display: none;
}
.searchIcon { background-image: url(/img/func_icons/util/search20.gif);
	background-position: 0px 0px;width:20px;
	height:20px;
    background-position: top left;
}
.searchIconOn { background-image: url(/img/func_icons/util/search20.gif);
	background-position: 0px 0px;width:20px;
	height:20px;
    background-position: top right;
}
.trashIcon { background-image: url(/img/func_icons/util/trash20.gif);
	background-position: 0px 0px;width:20px;
	height:20px;
    background-position: top left;
}
.trashIconOn { background-image: url(/img/func_icons/util/trash20.gif);
	background-position: 0px 0px;width:20px;
	height:20px;
    background-position: top right;
}
.comboboxIcon { background-image: url(/img/func_icons/util/combobox20.gif);
	background-position: 0px 0px;width:20px;
	height:20px;
    background-position: top left;
}
.comboboxIconOn { background-image: url(/img/func_icons/util/combobox20.gif);
	background-position: 0px 0px;width:20px;
	height:20px;
    background-position: top right;
}
.customizePageIcon { background-image: url(/img/func_icons/util/customize20.gif);
	background-position: 0px 0px;width:20px;
	height:20px;
    background-position: top left;
}
.customizePageIconOn { background-image: url(/img/func_icons/util/customize20.gif);
	background-position: 0px 0px;width:20px;
	height:20px;
    background-position: top right;
}
.editLayoutIcon { background-image: url(/img/func_icons/util/editLayout20.gif);
	background-position: 0px 0px;width:20px;
	height:20px; }
.linkIcon { background-image: url(/img/func_icons/util/link20.gif);
	background-position: 0px 0px;width:20px;
	height:20px;
    background-position: top left;
}
.linkIconOn { background-image: url(/img/func_icons/util/link20.gif);
	background-position: 0px 0px;width:20px;
	height:20px;
    background-position: top right;
}
.videoPlay {background-image: url(/img/func_icons/videoPlay.png);
	background-position: 0px 0px;width:24px;
	height:24px;
    background-position: top left;
}
.videoPlayOn {background-image: url(/img/func_icons/videoPlay.png);
	background-position: 0px 0px;width:24px;
	height:24px;
    background-position: top right;
}
.menuArrow {background-image: url(/img/dcm/menuArrow_sprite.gif);
	background-position: 0px 0px;width:16px;
	height:20px;
    background-position: 0 0px;
}
.menuArrowOn {background-image: url(/img/dcm/menuArrow_sprite.gif);
	background-position: 0px 0px;width:16px;
	height:20px;
    background-position: 0 -20px;
}
.expanded .menuArrow {background-image: url(/img/dcm/menuArrow_sprite.gif);
	background-position: 0px 0px;width:16px;
	height:20px;
    background-position: 0 -40px;
}
.expanded .menuArrowOn {background-image: url(/img/dcm/menuArrow_sprite.gif);
	background-position: 0px 0px;width:16px;
	height:20px;
    background-position: 0 -60px;
}
.rtl .menuArrow {background-image: url(/img/dcm/menuArrow_sprite.gif);
	background-position: 0px 0px;width:16px;
	height:20px;
    background-position: 0 -40px;
}
.rtl .menuArrowOn {background-image: url(/img/dcm/menuArrow_sprite.gif);
	background-position: 0px 0px;width:16px;
	height:20px;
    background-position: 0 -60px;
}
.expanded .rtl .menuArrow {background-image: url(/img/dcm/menuArrow_sprite.gif);
	background-position: 0px 0px;width:16px;
	height:20px;
    background-position: 0 0px;
}
.expanded .rtl .menuArrowOn {background-image: url(/img/dcm/menuArrow_sprite.gif);
	background-position: 0px 0px;width:16px;
	height:20px;
    background-position: 0 -20px;
}
.forceLogo {
	background-image: url(/img/forceMenuLogo.gif);
	background-position: 0px 0px;width:91px;
	height:31px;
    background-position: 0 0px;
}
.forceLogoOn, a#forceLogoLink:focus .forceLogo {
	background-image: url(/img/forceMenuLogo.gif);
	background-position: 0px 0px;width:91px;
	height:31px;
    background-position: 0 -31px;
}



/* ======== CSS File Information ========
          version: 26.0
       configMode: CSS Object Library
             skin: Salesforce
           cssKey: zen-components
            sheet: oocss/base/core/icons/themes/aloha/icons.css
          postfix: 
   spritesEnabled: true */

.helpIcon {
    background: transparent url(/img/alohaSkin/help_orange.png) no-repeat;
    vertical-align: bottom;
}

.infoIcon {
    background-image: url(/img/alohaSkin/info_sprite.png);
    background-position: left top;
    height: 15px;
}



